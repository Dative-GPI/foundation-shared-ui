import{d as I,c as d,y as b,z as h,A as T,C as r,m as M,H as _,I as U,F as L,N as m,B as P,D as j}from"./vue.esm-bundler-l-siv0w9.js";import{F as z}from"./FSAutocompleteField-CRwlV8VM.js";import{F as S}from"./FSButton-DcUuAZqz.js";import{F as E}from"./FSChip-CH8gQQD0.js";import{F as C}from"./FSIcon-uIr9VdFq.js";import{u as v}from"./useRoleOrganisationTypes-ayjwzfDW.js";import{u as H}from"./useRoleOrganisations-BCNNabxX.js";import{u as W}from"./useAutocomplete-xPLUKL5U.js";import{C as c}from"./useColors-Bs2u1_6J.js";import{u as q}from"./useTranslations-CJK8D24x.js";import{_ as G}from"./_plugin-vue_export-helper-DlAUqK2U.js";var t=(e=>(e[e.None=0]="None",e[e.Organisation=1]="Organisation",e[e.OrganisationType=2]="OrganisationType",e))(t||{});const{$tr:f}=q(),J=e=>{switch(e){case t.None:return f("ui.role-type.none","None");case t.Organisation:return f("ui.role-type.organisation","Custom");case t.OrganisationType:return f("ui.role-type.organisation-type","Shared")}},K=e=>{switch(e){case t.None:return c.Error;case t.Organisation:return c.Primary;case t.OrganisationType:return c.Warning}},R=I({name:"FSAutocompleteRole",components:{FSAutocompleteField:z,FSButton:S,FSChip:E,FSIcon:C},props:{roleOrganisationTypeFilters:{type:Object,required:!1,default:null},roleOrganisationFilters:{type:Object,required:!1,default:null},modelValue:{type:[Array,String],required:!1,default:null},type:{type:[Array,Number],required:!1,default:t.None},ignoreRoleOrganisationTypes:{type:Boolean,required:!1,default:!1},ignoreRoleOrganisations:{type:Boolean,required:!1,default:!1},multiple:{type:Boolean,required:!1,default:!1},toggleSetDisabled:{type:Boolean,required:!1,default:!1}},emits:["update","update:modelValue","update:type"],setup(e,{emit:l}){const{getMany:g,fetching:y,entities:O}=v(),{getMany:F,fetching:i,entities:s}=H(),{$tr:o}=q(),u=d(()=>O.value.map(a=>({id:a.id,icon:a.icon,label:a.label,type:t.OrganisationType})).concat(s.value.map(a=>({id:a.id,icon:a.icon,label:a.label,type:t.Organisation})))),N=d(()=>w.value&&(y.value||i.value)),A=d(()=>e.multiple&&e.modelValue?o("ui.autocomplete-role.placeholder","{0} role(s) selected",e.modelValue.length):null),$=a=>{if(Array.isArray(a)){const n=a.map(p=>p.id),V=a.map(p=>p.type);l("update:modelValue",n),l("update:type",V),l("update",{modelValue:n,type:V})}else l("update:modelValue",a==null?void 0:a.id),l("update:type",a==null?void 0:a.type),l("update",{modelValue:a==null?void 0:a.id,type:a==null?void 0:a.type})},B=a=>{const n=[];return e.ignoreRoleOrganisations||n.push(F({...e.roleOrganisationFilters,search:a??void 0})),e.ignoreRoleOrganisationTypes||n.push(g({...e.roleOrganisationTypeFilters,search:a??void 0})),Promise.all(n)},{toggleSet:k,init:w,onUpdate:D}=W(u,[()=>e.roleOrganisationTypeFilters,()=>e.roleOrganisationFilters],l,B,$);return{placeholder:A,toggleSet:k,RoleType:t,loading:N,roles:u,roleTypeColor:K,roleTypeLabel:J,onUpdate:D}}});function Q(e,l,g,y,O,F){const i=b("FSChip"),s=b("FSAutocompleteField");return h(),T(s,M({toggleSet:!e.$props.toggleSetDisabled&&e.toggleSet,multiple:e.$props.multiple,placeholder:e.placeholder,loading:e.loading,items:e.roles,modelValue:e.$props.modelValue,"onUpdate:modelValue":e.onUpdate},e.$attrs),{"item-prepend":r(({item:o})=>[o.icon?(h(),T(C,{key:0},{default:r(()=>[_(U(o.icon),1)]),_:2},1024)):L("",!0)]),"item-append":r(({item:o})=>[m(i,{color:e.roleTypeColor(o.type),label:e.roleTypeLabel(o.type),editable:!1},null,8,["color","label"])]),"toggle-set-item":r(o=>[m(S,{prependIcon:o.item.icon,variant:o.getVariant(o.item),color:o.getColor(o.item),class:j(o.getClass(o.item)),label:o.item.label,onClick:u=>o.toggle(o.item)},P({_:2},[o.item.type?{name:"append",fn:r(()=>[m(i,{color:e.roleTypeColor(o.item.type),label:e.roleTypeLabel(o.item.type),editable:!1},null,8,["color","label"])]),key:"0"}:void 0]),1032,["prependIcon","variant","color","class","label","onClick"])]),_:1},16,["toggleSet","multiple","placeholder","loading","items","modelValue","onUpdate:modelValue"])}const ie=G(R,[["render",Q]]);R.__docgenInfo={displayName:"FSAutocompleteRole",exportName:"default",description:"",tags:{},props:[{name:"roleOrganisationTypeFilters",type:{name:"RoleOrganisationTypeFilters"},required:!1,defaultValue:{func:!1,value:"null"}},{name:"roleOrganisationFilters",type:{name:"RoleOrganisationFilters"},required:!1,defaultValue:{func:!1,value:"null"}},{name:"modelValue",type:{name:"string[] | string | null"},required:!1,defaultValue:{func:!1,value:"null"}},{name:"type",type:{name:"RoleType[] | RoleType"},required:!1,defaultValue:{func:!1,value:"RoleType.None"}},{name:"ignoreRoleOrganisationTypes",type:{name:"boolean"},required:!1,defaultValue:{func:!1,value:"false"}},{name:"ignoreRoleOrganisations",type:{name:"boolean"},required:!1,defaultValue:{func:!1,value:"false"}},{name:"multiple",type:{name:"boolean"},required:!1,defaultValue:{func:!1,value:"false"}},{name:"toggleSetDisabled",type:{name:"boolean"},required:!1,defaultValue:{func:!1,value:"false"}}],events:[{name:"update"},{name:"update:modelValue"},{name:"update:type"}],sourceFiles:["/home/runner/work/foundation-shared-ui/foundation-shared-ui/src/core/foundation-core-components/components/autocompletes/FSAutocompleteRole.vue"]};export{ie as F};
