import{b as l,c as s}from"./vue.esm-bundler-CWdIlc2r.js";let p=!1;const a=l(window.outerHeight),i=l(window.outerWidth),c=()=>{const t=()=>{a.value=window.outerHeight,i.value=window.outerWidth},o=s(()=>navigator.maxTouchPoints>0),e=s(()=>i.value<1264),n=s(()=>i.value<600);p||(window.addEventListener("resize",t),p=!0);const r=s(()=>({"--fs-font-h1-font-size":e.value?"28px":"36px","--fs-font-h1-line-height":e.value?"32px":"40px","--fs-font-h1-letter-spacing":e.value?"-1.4px":"-0.72px","--fs-font-h2-font-size":e.value?"22px":"26px","--fs-font-h2-line-height":e.value?"24px":"32px","--fs-font-h2-letter-spacing":e.value?"-0.88px":"-0.78px","--fs-font-h3-font-size":e.value?"16px":"20px","--fs-font-h3-line-height":e.value?"20px":"24px","--fs-font-h3-letter-spacing":e.value?"-0.48px":"-0.6px","--fs-font-button-font-size":e.value?"12px":"14px","--fs-font-button-line-height":e.value?"16px":"20px","--fs-font-button-letter-spacing":e.value?"-0.36px":"-0.42px","--fs-font-overline-font-size":e.value?"10px":"12px","--fs-font-overline-line-height":(e.value,"16px"),"--fs-font-overline-letter-spacing":(e.value,"0"),...f.value})),f=s(()=>({"--fs-font-body-font-size":e.value?"12px":"14px","--fs-font-body-line-height":e.value?"16px":"20px","--fs-font-body-letter-spacing":e.value?"-0.36px":"-0.42px"}));return{isTouchScreenEnabled:o,isMobileSized:e,isExtraSmall:n,windowHeight:a,windowWidth:i,fontStyles:r,bodyStyle:f}},{isMobileSized:x,isExtraSmall:u}=c(),d=(t,o="fit-content",e="px")=>{if(t==null)return o;if(Array.isArray(t)){if(u.value){const n=t[2]??t[1]??t[0];return typeof n=="string"&&isNaN(+n)?n:`${n}${e}`}if(x.value){const n=t[1]??t[0];return typeof n=="string"&&isNaN(+n)?n:`${n}${e}`}return typeof t[0]=="string"&&isNaN(+t[0])?t[0]:`${t[0]}${e}`}return typeof t=="string"&&isNaN(+t)?t:`${t}${e}`},g=t=>{if(t==null)return 0;if(Array.isArray(t)){if(u.value){const n=t[2]??t[1]??t[0];if(typeof n=="number")return n;const r=parseInt(n.replace(/[^0-9.]/g,""));return isNaN(r)?0:r}if(x.value){const n=t[1]??t[0];if(typeof n=="number")return n;const r=parseInt(n.replace(/[^0-9.]/g,""));return isNaN(r)?0:r}if(typeof t[0]=="number")return t[0];const e=parseInt(t[0].replace(/[^0-9.]/g,""));return isNaN(e)?0:e}if(typeof t=="number")return t;const o=parseInt(t.replace(/[^0-9.]/g,""));return isNaN(o)?0:o};export{d as s,c as u,g as v};
