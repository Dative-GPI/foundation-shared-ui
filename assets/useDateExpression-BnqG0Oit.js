import{u as M}from"./useAppTimeZone-Yy6tN57G.js";import{u as y}from"./useDateFormat-CLF81prI.js";const v=()=>{const{getOffsetDifference:a}=M(),{parseForPicker:f}=y(),i=/(?:(?:([-\+])(\d*))?(\w+))?(?:\/(\w))?/g,w="now",d=(e,o={})=>{const r=f(e);if(r)return r;const n={...o,[w]:new Date().getTime()};return u(e,n)},u=(e,o)=>{e=e.replace(/\s/g,"");const r=e.matchAll(i);if(!r)return console.error("Invalid expression"),NaN;let n=0;return r.forEach(s=>{const t=s[1],c=s[2],l=s[3],D=s[4];l&&(n=g(n,t,c,l,o)),D&&(n=N(n,D))}),n},g=(e,o,r,n,s)=>{let t=o==="-"?-1:1;switch(t*=Number.isNaN(parseInt(r))?1:parseInt(r),n){case"s":return e+t*1e3;case"m":return e+t*60*1e3;case"h":return e+t*60*60*1e3;case"d":return new Date(e).setDate(new Date(e).getDate()+t);case"w":return new Date(e).setDate(new Date(e).getDate()+t*7);case"M":return new Date(e).setMonth(new Date(e).getMonth()+t);case"y":return new Date(e).setFullYear(new Date(e).getFullYear()+t);default:if(s[n]){const c=h(n,s);return e+t*c}else return console.error(`Invalid unit expression, unit ${n} is not defined in the variables`),e}},h=(e,o)=>{if(o[e]){const r=parseInt(o[e].toString());if(typeof o[e]=="number")return r;if(isNaN(r)){const n=o[e].toString(),s=u(n,o);return isNaN(s)?(console.error(`Invalid unit expression, unit ${e} is not defined in the variables`),0):s}else return r}else return console.error(`Invalid unit expression, unit ${e} is not defined in the variables`),0},N=(e,o)=>{switch(e+=a(e),o){case"h":return new Date(e).setMinutes(0,0,0)-a(e);case"d":return new Date(e).setHours(0,0,0,0)-a(e);case"w":const r=new Date(e),n=r.getDay(),s=r.getDate()-n+(n===0?-6:1);return new Date(r.setDate(s)).setHours(0,0,0,0)-a(e);case"M":const t=new Date(e);return new Date(t.setMonth(t.getMonth(),1)).setHours(0,0,0,0)-a(e);case"y":const c=new Date(e);return new Date(c.setMonth(0,1)).setHours(0,0,0,0)-a(e)}return e};return{convert:d}};export{v as u};
