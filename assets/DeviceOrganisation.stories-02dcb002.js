import{j as H,g as be,w as ae,Z as we,f as Se,o as ve,D as K,E as J,F as Y,A as ye,I as Ce}from"./vue.esm-bundler-838daa40.js";import{F as Ie}from"./FSDeviceOrganisationTileUI-8d966d1e.js";import{F as ke}from"./FSLoadTile-c8c97c9d.js";import{b as v}from"./useAppTimeZone-a305acc7.js";import{C as Te,H as le}from"./base-ef43f4ed.js";import{S as D}from"./serviceFactory-2dfad3af.js";import{C as $}from"./composableFactory-5509dfbf.js";import{P as Ee}from"./pathCrumb-3dbc85d5.js";import{_ as De}from"./_plugin-vue_export-helper-c27b6911.js";import"./FSStatusesCarousel-be04656d.js";import"./FSButton-8a94f710.js";import"./FSClickable-80b82e76.js";import"./FSCard-e5e470ea.js";import"./FSCol-44fe82a9.js";import"./css-67cfec15.js";import"./FSRow-753b58e5.js";import"./useColors-9d29fce3.js";import"./_commonjsHelpers-725317a4.js";import"./index-a0e5e2a3.js";import"./theme-f9f3e2d4.js";import"./VProgressCircular-95e816d7.js";import"./color-3e53cf3d.js";import"./useRender-f6a4770d.js";import"./resizeObserver-21650322.js";import"./VIcon-281b119b.js";import"./tag-d73e64d5.js";import"./FSSpan-3df08200.js";import"./useSlots-6ce8c1a9.js";import"./FSIcon-212b990d.js";import"./FSWindow-6f1357d0.js";import"./group-d31dd239.js";import"./proxiedModel-3239cc3c.js";import"./locale-5633e5ee.js";import"./VBtn-a5dad0d3.js";import"./border-749eb26c.js";import"./density-e1cdced2.js";import"./elevation-c2192325.js";import"./rounded-94d04543.js";import"./dimensions-be952165.js";import"./loader-62f4df25.js";import"./anchor-dbd6e54f.js";import"./router-d69bdbea.js";import"./index-a755b9d6.js";import"./VDefaultsProvider-a165414e.js";import"./lazy-f517c978.js";import"./ssrBoot-00bf1891.js";import"./transition-ee4dd36d.js";import"./FSChip-d01d58a4.js";import"./FSText-0819f919.js";import"./FSColor-8a6026bc.js";import"./VMenu-ec057191.js";import"./VOverlay-a0b245b4.js";import"./forwardRefs-e658ad70.js";import"./display-ba09a035.js";import"./scopeId-02ca7b8d.js";import"./useTranslations-419c1021.js";import"./FSDivider-4e9442e5.js";import"./FSImage-6d919371.js";import"./FSLoader-e5a4173e.js";import"./base-0de1729e.js";import"./VImg-26cf6021.js";import"./index-e75f540f.js";import"./FSTile-a17dbbf3.js";import"./FSCheckbox-c67676d0.js";import"./useRules-cda8e231.js";import"./VSelectionControl-b5e8c167.js";import"./VLabel-907d1b92.js";import"./VInput-5523e371.js";import"./index-6fa9bdc1.js";import"./useAppOrganisationId-ac05104a.js";import"./lodash-569b8a6d.js";class Pe{constructor(e){this.id=e.id,this.sourceTimestamp=e.sourceTimestamp?v(e.sourceTimestamp):null,this.enqueuedTimestamp=e.enqueuedTimestamp?v(e.enqueuedTimestamp):null,this.processedTimestamp=e.processedTimestamp?v(e.processedTimestamp):null,this.status=e.status,this.icon=e.icon,this.color=e.color}}class B extends Pe{constructor(e){super(e)}}class Q{constructor(e){this.id=e.id,this.label=e.label,this.status=e.status,this.criticity=e.criticity,this.sourceTimestamp=e.sourceTimestamp?v(e.sourceTimestamp):void 0,this.enqueuedTimestamp=e.enqueuedTimestamp?v(e.enqueuedTimestamp):void 0}}class Re{constructor(e){this.id=e.id,this.key=e.key,this.value=e.value,this.keyLabel=e.keyLabel,this.valueLabel=e.valueLabel}}class $e{constructor(e){this.id=e.id,this.statuses=e.statuses.map(t=>new Ae(t))}}class Ae{constructor(e){this.modelStatusId=e.modelStatusId,this.statusGroups=e.statusGroups.map(t=>new xe(t))}}class xe{constructor(e){this.sourceTimestamp=e.sourceTimestamp?v(e.sourceTimestamp):null,this.enqueuedTimestamp=e.enqueuedTimestamp?v(e.enqueuedTimestamp):null,this.processedTimestamp=e.processedTimestamp?v(e.processedTimestamp):null,this.groupByValue=e.groupByValue,this.value=e.value,this.unit=e.unit,this.label=e.label,this.icon=e.icon,this.color=e.color}}class F extends $e{constructor(e){super(e)}}class Oe{constructor(e){this.id=e.id,this.modelId=e.modelId,this.dataCategoryId=e.dataCategoryId,this.dataCategoryLabel=e.dataCategoryLabel,this.dataDefinitionId=e.dataDefinitionId,this.dataDefinitionLabel=e.dataDefinitionLabel,this.groupById=e.groupById,this.groupByLabel=e.groupByLabel,this.label=e.label,this.index=e.index,this.lifetime=e.lifetime,this.timeToLive=e.timeToLive,this.showDefault=e.showDefault,this.iconDefault=e.iconDefault,this.colorDefault=e.colorDefault}}class he{get connectable(){return this.connectivity}constructor(e){this.id=e.id,this.deviceId=e.deviceId,this.manufacturerId=e.manufacturerId,this.manufacturerLabel=e.manufacturerLabel,this.articleId=e.articleId,this.articleLabel=e.articleLabel,this.modelId=e.modelId,this.modelLabel=e.modelLabel,this.ownerId=e.ownerId,this.ownerLabel=e.ownerLabel,this.organisationId=e.organisationId,this.managerId=e.managerId,this.managerName=e.managerName,this.locationId=e.locationId,this.locationLabel=e.locationLabel,this.locationAddress=e.locationAddress,this.groupId=e.groupId,this.groupLabel=e.groupLabel,this.groupIcon=e.groupIcon,this.label=e.label,this.code=e.code,this.imageId=e.imageId,this.tags=e.tags.slice(),this.unrestricted=e.unrestricted,this.online=e.online,this.meta={...e.meta},this.modelStatuses=e.modelStatuses.map(t=>new Oe(t)),this.status=new F(e.status),this.connectivity=new B(e.connectivity),this.alerts=e.alerts.map(t=>new Q(t)),this.worstAlert=e.worstAlert!=null?new Q(e.worstAlert):null}}class M extends he{constructor(e){super(e),this.articleCode=e.articleCode,this.familyId=e.familyId,this.familyLabel=e.familyLabel,this.description=e.description,this.options=e.options.map(t=>new Re({...t})),this.path=e.path.map(t=>new Ee({...t})).sort((t,n)=>n.index-t.index)}}const W=()=>`${Te()}/device-organisations`,C=o=>`${W()}/${encodeURIComponent(o)}`,Le=o=>`${C(o)}/group`,Ne=o=>`${C(o)}/location`,Ue=o=>`${C(o)}/connectivity`,He=()=>`${le()}/connectivities`,Me=o=>`${C(o)}/status`,We=()=>`${le()}/statuses`;class I extends Error{constructor(e,t){const n=new.target.prototype;super(`${e}: Status code '${t}'`),this.statusCode=t,this.__proto__=n}}class j extends Error{constructor(e="A timeout occurred."){const t=new.target.prototype;super(e),this.__proto__=t}}class w extends Error{constructor(e="An abort occurred."){const t=new.target.prototype;super(e),this.__proto__=t}}class Be extends Error{constructor(e,t){const n=new.target.prototype;super(e),this.transport=t,this.errorType="UnsupportedTransportError",this.__proto__=n}}class Fe extends Error{constructor(e,t){const n=new.target.prototype;super(e),this.transport=t,this.errorType="DisabledTransportError",this.__proto__=n}}class je extends Error{constructor(e,t){const n=new.target.prototype;super(e),this.transport=t,this.errorType="FailedToStartTransportError",this.__proto__=n}}class Z extends Error{constructor(e){const t=new.target.prototype;super(e),this.errorType="FailedToNegotiateWithServerError",this.__proto__=t}}class Ve extends Error{constructor(e,t){const n=new.target.prototype;super(e),this.innerErrors=t,this.__proto__=n}}class ue{constructor(e,t,n){this.statusCode=e,this.statusText=t,this.content=n}}class L{get(e,t){return this.send({...t,method:"GET",url:e})}post(e,t){return this.send({...t,method:"POST",url:e})}delete(e,t){return this.send({...t,method:"DELETE",url:e})}getCookieString(e){return""}}var r;(function(o){o[o.Trace=0]="Trace",o[o.Debug=1]="Debug",o[o.Information=2]="Information",o[o.Warning=3]="Warning",o[o.Error=4]="Error",o[o.Critical=5]="Critical",o[o.None=6]="None"})(r||(r={}));class P{constructor(){}log(e,t){}}P.instance=new P;const qe="8.0.0";class p{static isRequired(e,t){if(e==null)throw new Error(`The '${t}' argument is required.`)}static isNotEmpty(e,t){if(!e||e.match(/^\s*$/))throw new Error(`The '${t}' argument should not be empty.`)}static isIn(e,t,n){if(!(e in t))throw new Error(`Unknown ${n} value: ${e}.`)}}class f{static get isBrowser(){return!f.isNode&&typeof window=="object"&&typeof window.document=="object"}static get isWebWorker(){return!f.isNode&&typeof self=="object"&&"importScripts"in self}static get isReactNative(){return!f.isNode&&typeof window=="object"&&typeof window.document>"u"}static get isNode(){return typeof process<"u"&&process.release&&process.release.name==="node"}}function R(o,e){let t="";return T(o)?(t=`Binary data of length ${o.byteLength}`,e&&(t+=`. Content: '${ze(o)}'`)):typeof o=="string"&&(t=`String data of length ${o.length}`,e&&(t+=`. Content: '${o}'`)),t}function ze(o){const e=new Uint8Array(o);let t="";return e.forEach(n=>{const s=n<16?"0":"";t+=`0x${s}${n.toString(16)} `}),t.substr(0,t.length-1)}function T(o){return o&&typeof ArrayBuffer<"u"&&(o instanceof ArrayBuffer||o.constructor&&o.constructor.name==="ArrayBuffer")}async function de(o,e,t,n,s,i){const c={},[a,l]=E();c[a]=l,o.log(r.Trace,`(${e} transport) sending data. ${R(s,i.logMessageContent)}.`);const h=T(s)?"arraybuffer":"text",d=await t.post(n,{content:s,headers:{...c,...i.headers},responseType:h,timeout:i.timeout,withCredentials:i.withCredentials});o.log(r.Trace,`(${e} transport) request complete. Response status: ${d.statusCode}.`)}function Ge(o){return o===void 0?new O(r.Information):o===null?P.instance:o.log!==void 0?o:new O(o)}class Xe{constructor(e,t){this._subject=e,this._observer=t}dispose(){const e=this._subject.observers.indexOf(this._observer);e>-1&&this._subject.observers.splice(e,1),this._subject.observers.length===0&&this._subject.cancelCallback&&this._subject.cancelCallback().catch(t=>{})}}class O{constructor(e){this._minLevel=e,this.out=console}log(e,t){if(e>=this._minLevel){const n=`[${new Date().toISOString()}] ${r[e]}: ${t}`;switch(e){case r.Critical:case r.Error:this.out.error(n);break;case r.Warning:this.out.warn(n);break;case r.Information:this.out.info(n);break;default:this.out.log(n);break}}}}function E(){let o="X-SignalR-User-Agent";return f.isNode&&(o="User-Agent"),[o,Ke(qe,Je(),Qe(),Ye())]}function Ke(o,e,t,n){let s="Microsoft SignalR/";const i=o.split(".");return s+=`${i[0]}.${i[1]}`,s+=` (${o}; `,e&&e!==""?s+=`${e}; `:s+="Unknown OS; ",s+=`${t}`,n?s+=`; ${n}`:s+="; Unknown Runtime Version",s+=")",s}function Je(){if(f.isNode)switch(process.platform){case"win32":return"Windows NT";case"darwin":return"macOS";case"linux":return"Linux";default:return process.platform}else return""}function Ye(){if(f.isNode)return process.versions.node}function Qe(){return f.isNode?"NodeJS":"Browser"}function ee(o){return o.stack?o.stack:o.message?o.message:`${o}`}function Ze(){if(typeof globalThis<"u")return globalThis;if(typeof self<"u")return self;if(typeof window<"u")return window;if(typeof global<"u")return global;throw new Error("could not find global")}function et(o){return typeof fetch>"u"||f.isNode?(o._jar=new(require("tough-cookie")).CookieJar,typeof fetch>"u"?o._fetchType=require("node-fetch"):o._fetchType=fetch,o._fetchType=require("fetch-cookie")(o._fetchType,o._jar),!0):!1}function tt(o){return typeof AbortController>"u"?(o._abortControllerType=require("abort-controller"),!0):!1}function nt(){return require("ws")}function ot(){return require("eventsource")}class st extends L{constructor(e){super(),this._logger=e;const t={_fetchType:void 0,_jar:void 0};et(t)?(this._fetchType=t._fetchType,this._jar=t._jar):this._fetchType=fetch.bind(Ze()),this._abortControllerType=AbortController;const n={_abortControllerType:this._abortControllerType};tt(n)&&(this._abortControllerType=n._abortControllerType)}async send(e){if(e.abortSignal&&e.abortSignal.aborted)throw new w;if(!e.method)throw new Error("No method defined.");if(!e.url)throw new Error("No url defined.");const t=new this._abortControllerType;let n;e.abortSignal&&(e.abortSignal.onabort=()=>{t.abort(),n=new w});let s=null;if(e.timeout){const l=e.timeout;s=setTimeout(()=>{t.abort(),this._logger.log(r.Warning,"Timeout from HTTP request."),n=new j},l)}e.content===""&&(e.content=void 0),e.content&&(e.headers=e.headers||{},T(e.content)?e.headers["Content-Type"]="application/octet-stream":e.headers["Content-Type"]="text/plain;charset=UTF-8");let i;try{i=await this._fetchType(e.url,{body:e.content,cache:"no-cache",credentials:e.withCredentials===!0?"include":"same-origin",headers:{"X-Requested-With":"XMLHttpRequest",...e.headers},method:e.method,mode:"cors",redirect:"follow",signal:t.signal})}catch(l){throw n||(this._logger.log(r.Warning,`Error from HTTP request. ${l}.`),l)}finally{s&&clearTimeout(s),e.abortSignal&&(e.abortSignal.onabort=null)}if(!i.ok){const l=await te(i,"text");throw new I(l||i.statusText,i.status)}const a=await te(i,e.responseType);return new ue(i.status,i.statusText,a)}getCookieString(e){let t="";return f.isNode&&this._jar&&this._jar.getCookies(e,(n,s)=>t=s.join("; ")),t}}function te(o,e){let t;switch(e){case"arraybuffer":t=o.arrayBuffer();break;case"text":t=o.text();break;case"blob":case"document":case"json":throw new Error(`${e} is not supported.`);default:t=o.text();break}return t}class it extends L{constructor(e){super(),this._logger=e}send(e){return e.abortSignal&&e.abortSignal.aborted?Promise.reject(new w):e.method?e.url?new Promise((t,n)=>{const s=new XMLHttpRequest;s.open(e.method,e.url,!0),s.withCredentials=e.withCredentials===void 0?!0:e.withCredentials,s.setRequestHeader("X-Requested-With","XMLHttpRequest"),e.content===""&&(e.content=void 0),e.content&&(T(e.content)?s.setRequestHeader("Content-Type","application/octet-stream"):s.setRequestHeader("Content-Type","text/plain;charset=UTF-8"));const i=e.headers;i&&Object.keys(i).forEach(c=>{s.setRequestHeader(c,i[c])}),e.responseType&&(s.responseType=e.responseType),e.abortSignal&&(e.abortSignal.onabort=()=>{s.abort(),n(new w)}),e.timeout&&(s.timeout=e.timeout),s.onload=()=>{e.abortSignal&&(e.abortSignal.onabort=null),s.status>=200&&s.status<300?t(new ue(s.status,s.statusText,s.response||s.responseText)):n(new I(s.response||s.responseText||s.statusText,s.status))},s.onerror=()=>{this._logger.log(r.Warning,`Error from HTTP request. ${s.status}: ${s.statusText}.`),n(new I(s.statusText,s.status))},s.ontimeout=()=>{this._logger.log(r.Warning,"Timeout from HTTP request."),n(new j)},s.send(e.content)}):Promise.reject(new Error("No url defined.")):Promise.reject(new Error("No method defined."))}}class rt extends L{constructor(e){if(super(),typeof fetch<"u"||f.isNode)this._httpClient=new st(e);else if(typeof XMLHttpRequest<"u")this._httpClient=new it(e);else throw new Error("No usable HttpClient found.")}send(e){return e.abortSignal&&e.abortSignal.aborted?Promise.reject(new w):e.method?e.url?this._httpClient.send(e):Promise.reject(new Error("No url defined.")):Promise.reject(new Error("No method defined."))}getCookieString(e){return this._httpClient.getCookieString(e)}}class b{static write(e){return`${e}${b.RecordSeparator}`}static parse(e){if(e[e.length-1]!==b.RecordSeparator)throw new Error("Message is incomplete.");const t=e.split(b.RecordSeparator);return t.pop(),t}}b.RecordSeparatorCode=30;b.RecordSeparator=String.fromCharCode(b.RecordSeparatorCode);class ct{writeHandshakeRequest(e){return b.write(JSON.stringify(e))}parseHandshakeResponse(e){let t,n;if(T(e)){const a=new Uint8Array(e),l=a.indexOf(b.RecordSeparatorCode);if(l===-1)throw new Error("Message is incomplete.");const h=l+1;t=String.fromCharCode.apply(null,Array.prototype.slice.call(a.slice(0,h))),n=a.byteLength>h?a.slice(h).buffer:null}else{const a=e,l=a.indexOf(b.RecordSeparator);if(l===-1)throw new Error("Message is incomplete.");const h=l+1;t=a.substring(0,h),n=a.length>h?a.substring(h):null}const s=b.parse(t),i=JSON.parse(s[0]);if(i.type)throw new Error("Expected a handshake response from the server.");return[n,i]}}var u;(function(o){o[o.Invocation=1]="Invocation",o[o.StreamItem=2]="StreamItem",o[o.Completion=3]="Completion",o[o.StreamInvocation=4]="StreamInvocation",o[o.CancelInvocation=5]="CancelInvocation",o[o.Ping=6]="Ping",o[o.Close=7]="Close",o[o.Ack=8]="Ack",o[o.Sequence=9]="Sequence"})(u||(u={}));class at{constructor(){this.observers=[]}next(e){for(const t of this.observers)t.next(e)}error(e){for(const t of this.observers)t.error&&t.error(e)}complete(){for(const e of this.observers)e.complete&&e.complete()}subscribe(e){return this.observers.push(e),new Xe(this,e)}}class lt{constructor(e,t,n){this._bufferSize=1e5,this._messages=[],this._totalMessageCount=0,this._waitForSequenceMessage=!1,this._nextReceivingSequenceId=1,this._latestReceivedSequenceId=0,this._bufferedByteCount=0,this._reconnectInProgress=!1,this._protocol=e,this._connection=t,this._bufferSize=n}async _send(e){const t=this._protocol.writeMessage(e);let n=Promise.resolve();if(this._isInvocationMessage(e)){this._totalMessageCount++;let s=()=>{},i=()=>{};T(t)?this._bufferedByteCount+=t.byteLength:this._bufferedByteCount+=t.length,this._bufferedByteCount>=this._bufferSize&&(n=new Promise((c,a)=>{s=c,i=a})),this._messages.push(new ht(t,this._totalMessageCount,s,i))}try{this._reconnectInProgress||await this._connection.send(t)}catch{this._disconnected()}await n}_ack(e){let t=-1;for(let n=0;n<this._messages.length;n++){const s=this._messages[n];if(s._id<=e.sequenceId)t=n,T(s._message)?this._bufferedByteCount-=s._message.byteLength:this._bufferedByteCount-=s._message.length,s._resolver();else if(this._bufferedByteCount<this._bufferSize)s._resolver();else break}t!==-1&&(this._messages=this._messages.slice(t+1))}_shouldProcessMessage(e){if(this._waitForSequenceMessage)return e.type!==u.Sequence?!1:(this._waitForSequenceMessage=!1,!0);if(!this._isInvocationMessage(e))return!0;const t=this._nextReceivingSequenceId;return this._nextReceivingSequenceId++,t<=this._latestReceivedSequenceId?(t===this._latestReceivedSequenceId&&this._ackTimer(),!1):(this._latestReceivedSequenceId=t,this._ackTimer(),!0)}_resetSequence(e){if(e.sequenceId>this._nextReceivingSequenceId){this._connection.stop(new Error("Sequence ID greater than amount of messages we've received."));return}this._nextReceivingSequenceId=e.sequenceId}_disconnected(){this._reconnectInProgress=!0,this._waitForSequenceMessage=!0}async _resend(){const e=this._messages.length!==0?this._messages[0]._id:this._totalMessageCount+1;await this._connection.send(this._protocol.writeMessage({type:u.Sequence,sequenceId:e}));const t=this._messages;for(const n of t)await this._connection.send(n._message);this._reconnectInProgress=!1}_dispose(e){e??(e=new Error("Unable to reconnect to server."));for(const t of this._messages)t._rejector(e)}_isInvocationMessage(e){switch(e.type){case u.Invocation:case u.StreamItem:case u.Completion:case u.StreamInvocation:case u.CancelInvocation:return!0;case u.Close:case u.Sequence:case u.Ping:case u.Ack:return!1}}_ackTimer(){this._ackTimerHandle===void 0&&(this._ackTimerHandle=setTimeout(async()=>{try{this._reconnectInProgress||await this._connection.send(this._protocol.writeMessage({type:u.Ack,sequenceId:this._latestReceivedSequenceId}))}catch{}clearTimeout(this._ackTimerHandle),this._ackTimerHandle=void 0},1e3))}}class ht{constructor(e,t,n,s){this._message=e,this._id=t,this._resolver=n,this._rejector=s}}const ut=30*1e3,dt=15*1e3,gt=1e5;var g;(function(o){o.Disconnected="Disconnected",o.Connecting="Connecting",o.Connected="Connected",o.Disconnecting="Disconnecting",o.Reconnecting="Reconnecting"})(g||(g={}));class V{static create(e,t,n,s,i,c,a){return new V(e,t,n,s,i,c,a)}constructor(e,t,n,s,i,c,a){this._nextKeepAlive=0,this._freezeEventListener=()=>{this._logger.log(r.Warning,"The page is being frozen, this will likely lead to the connection being closed and messages being lost. For more information see the docs at https://learn.microsoft.com/aspnet/core/signalr/javascript-client#bsleep")},p.isRequired(e,"connection"),p.isRequired(t,"logger"),p.isRequired(n,"protocol"),this.serverTimeoutInMilliseconds=i??ut,this.keepAliveIntervalInMilliseconds=c??dt,this._statefulReconnectBufferSize=a??gt,this._logger=t,this._protocol=n,this.connection=e,this._reconnectPolicy=s,this._handshakeProtocol=new ct,this.connection.onreceive=l=>this._processIncomingData(l),this.connection.onclose=l=>this._connectionClosed(l),this._callbacks={},this._methods={},this._closedCallbacks=[],this._reconnectingCallbacks=[],this._reconnectedCallbacks=[],this._invocationId=0,this._receivedHandshakeResponse=!1,this._connectionState=g.Disconnected,this._connectionStarted=!1,this._cachedPingMessage=this._protocol.writeMessage({type:u.Ping})}get state(){return this._connectionState}get connectionId(){return this.connection&&this.connection.connectionId||null}get baseUrl(){return this.connection.baseUrl||""}set baseUrl(e){if(this._connectionState!==g.Disconnected&&this._connectionState!==g.Reconnecting)throw new Error("The HubConnection must be in the Disconnected or Reconnecting state to change the url.");if(!e)throw new Error("The HubConnection url must be a valid url.");this.connection.baseUrl=e}start(){return this._startPromise=this._startWithStateTransitions(),this._startPromise}async _startWithStateTransitions(){if(this._connectionState!==g.Disconnected)return Promise.reject(new Error("Cannot start a HubConnection that is not in the 'Disconnected' state."));this._connectionState=g.Connecting,this._logger.log(r.Debug,"Starting HubConnection.");try{await this._startInternal(),f.isBrowser&&window.document.addEventListener("freeze",this._freezeEventListener),this._connectionState=g.Connected,this._connectionStarted=!0,this._logger.log(r.Debug,"HubConnection connected successfully.")}catch(e){return this._connectionState=g.Disconnected,this._logger.log(r.Debug,`HubConnection failed to start successfully because of error '${e}'.`),Promise.reject(e)}}async _startInternal(){this._stopDuringStartError=void 0,this._receivedHandshakeResponse=!1;const e=new Promise((t,n)=>{this._handshakeResolver=t,this._handshakeRejecter=n});await this.connection.start(this._protocol.transferFormat);try{let t=this._protocol.version;this.connection.features.reconnect||(t=1);const n={protocol:this._protocol.name,version:t};if(this._logger.log(r.Debug,"Sending handshake request."),await this._sendMessage(this._handshakeProtocol.writeHandshakeRequest(n)),this._logger.log(r.Information,`Using HubProtocol '${this._protocol.name}'.`),this._cleanupTimeout(),this._resetTimeoutPeriod(),this._resetKeepAliveInterval(),await e,this._stopDuringStartError)throw this._stopDuringStartError;(this.connection.features.reconnect||!1)&&(this._messageBuffer=new lt(this._protocol,this.connection,this._statefulReconnectBufferSize),this.connection.features.disconnected=this._messageBuffer._disconnected.bind(this._messageBuffer),this.connection.features.resend=()=>{if(this._messageBuffer)return this._messageBuffer._resend()}),this.connection.features.inherentKeepAlive||await this._sendMessage(this._cachedPingMessage)}catch(t){throw this._logger.log(r.Debug,`Hub handshake failed with error '${t}' during start(). Stopping HubConnection.`),this._cleanupTimeout(),this._cleanupPingTimer(),await this.connection.stop(t),t}}async stop(){const e=this._startPromise;this.connection.features.reconnect=!1,this._stopPromise=this._stopInternal(),await this._stopPromise;try{await e}catch{}}_stopInternal(e){if(this._connectionState===g.Disconnected)return this._logger.log(r.Debug,`Call to HubConnection.stop(${e}) ignored because it is already in the disconnected state.`),Promise.resolve();if(this._connectionState===g.Disconnecting)return this._logger.log(r.Debug,`Call to HttpConnection.stop(${e}) ignored because the connection is already in the disconnecting state.`),this._stopPromise;const t=this._connectionState;return this._connectionState=g.Disconnecting,this._logger.log(r.Debug,"Stopping HubConnection."),this._reconnectDelayHandle?(this._logger.log(r.Debug,"Connection stopped during reconnect delay. Done reconnecting."),clearTimeout(this._reconnectDelayHandle),this._reconnectDelayHandle=void 0,this._completeClose(),Promise.resolve()):(t===g.Connected&&this._sendCloseMessage(),this._cleanupTimeout(),this._cleanupPingTimer(),this._stopDuringStartError=e||new w("The connection was stopped before the hub handshake could complete."),this.connection.stop(e))}async _sendCloseMessage(){try{await this._sendWithProtocol(this._createCloseMessage())}catch{}}stream(e,...t){const[n,s]=this._replaceStreamingParams(t),i=this._createStreamInvocation(e,t,s);let c;const a=new at;return a.cancelCallback=()=>{const l=this._createCancelInvocation(i.invocationId);return delete this._callbacks[i.invocationId],c.then(()=>this._sendWithProtocol(l))},this._callbacks[i.invocationId]=(l,h)=>{if(h){a.error(h);return}else l&&(l.type===u.Completion?l.error?a.error(new Error(l.error)):a.complete():a.next(l.item))},c=this._sendWithProtocol(i).catch(l=>{a.error(l),delete this._callbacks[i.invocationId]}),this._launchStreams(n,c),a}_sendMessage(e){return this._resetKeepAliveInterval(),this.connection.send(e)}_sendWithProtocol(e){return this._messageBuffer?this._messageBuffer._send(e):this._sendMessage(this._protocol.writeMessage(e))}send(e,...t){const[n,s]=this._replaceStreamingParams(t),i=this._sendWithProtocol(this._createInvocation(e,t,!0,s));return this._launchStreams(n,i),i}invoke(e,...t){const[n,s]=this._replaceStreamingParams(t),i=this._createInvocation(e,t,!1,s);return new Promise((a,l)=>{this._callbacks[i.invocationId]=(d,S)=>{if(S){l(S);return}else d&&(d.type===u.Completion?d.error?l(new Error(d.error)):a(d.result):l(new Error(`Unexpected message type: ${d.type}`)))};const h=this._sendWithProtocol(i).catch(d=>{l(d),delete this._callbacks[i.invocationId]});this._launchStreams(n,h)})}on(e,t){!e||!t||(e=e.toLowerCase(),this._methods[e]||(this._methods[e]=[]),this._methods[e].indexOf(t)===-1&&this._methods[e].push(t))}off(e,t){if(!e)return;e=e.toLowerCase();const n=this._methods[e];if(n)if(t){const s=n.indexOf(t);s!==-1&&(n.splice(s,1),n.length===0&&delete this._methods[e])}else delete this._methods[e]}onclose(e){e&&this._closedCallbacks.push(e)}onreconnecting(e){e&&this._reconnectingCallbacks.push(e)}onreconnected(e){e&&this._reconnectedCallbacks.push(e)}_processIncomingData(e){if(this._cleanupTimeout(),this._receivedHandshakeResponse||(e=this._processHandshakeResponse(e),this._receivedHandshakeResponse=!0),e){const t=this._protocol.parseMessages(e,this._logger);for(const n of t)if(!(this._messageBuffer&&!this._messageBuffer._shouldProcessMessage(n)))switch(n.type){case u.Invocation:this._invokeClientMethod(n);break;case u.StreamItem:case u.Completion:{const s=this._callbacks[n.invocationId];if(s){n.type===u.Completion&&delete this._callbacks[n.invocationId];try{s(n)}catch(i){this._logger.log(r.Error,`Stream callback threw error: ${ee(i)}`)}}break}case u.Ping:break;case u.Close:{this._logger.log(r.Information,"Close message received from server.");const s=n.error?new Error("Server returned an error on close: "+n.error):void 0;n.allowReconnect===!0?this.connection.stop(s):this._stopPromise=this._stopInternal(s);break}case u.Ack:this._messageBuffer&&this._messageBuffer._ack(n);break;case u.Sequence:this._messageBuffer&&this._messageBuffer._resetSequence(n);break;default:this._logger.log(r.Warning,`Invalid message type: ${n.type}.`);break}}this._resetTimeoutPeriod()}_processHandshakeResponse(e){let t,n;try{[n,t]=this._handshakeProtocol.parseHandshakeResponse(e)}catch(s){const i="Error parsing handshake response: "+s;this._logger.log(r.Error,i);const c=new Error(i);throw this._handshakeRejecter(c),c}if(t.error){const s="Server returned handshake error: "+t.error;this._logger.log(r.Error,s);const i=new Error(s);throw this._handshakeRejecter(i),i}else this._logger.log(r.Debug,"Server handshake complete.");return this._handshakeResolver(),n}_resetKeepAliveInterval(){this.connection.features.inherentKeepAlive||(this._nextKeepAlive=new Date().getTime()+this.keepAliveIntervalInMilliseconds,this._cleanupPingTimer())}_resetTimeoutPeriod(){if((!this.connection.features||!this.connection.features.inherentKeepAlive)&&(this._timeoutHandle=setTimeout(()=>this.serverTimeout(),this.serverTimeoutInMilliseconds),this._pingServerHandle===void 0)){let e=this._nextKeepAlive-new Date().getTime();e<0&&(e=0),this._pingServerHandle=setTimeout(async()=>{if(this._connectionState===g.Connected)try{await this._sendMessage(this._cachedPingMessage)}catch{this._cleanupPingTimer()}},e)}}serverTimeout(){this.connection.stop(new Error("Server timeout elapsed without receiving a message from the server."))}async _invokeClientMethod(e){const t=e.target.toLowerCase(),n=this._methods[t];if(!n){this._logger.log(r.Warning,`No client method with the name '${t}' found.`),e.invocationId&&(this._logger.log(r.Warning,`No result given for '${t}' method and invocation ID '${e.invocationId}'.`),await this._sendWithProtocol(this._createCompletionMessage(e.invocationId,"Client didn't provide a result.",null)));return}const s=n.slice(),i=!!e.invocationId;let c,a,l;for(const h of s)try{const d=c;c=await h.apply(this,e.arguments),i&&c&&d&&(this._logger.log(r.Error,`Multiple results provided for '${t}'. Sending error to server.`),l=this._createCompletionMessage(e.invocationId,"Client provided multiple results.",null)),a=void 0}catch(d){a=d,this._logger.log(r.Error,`A callback for the method '${t}' threw error '${d}'.`)}l?await this._sendWithProtocol(l):i?(a?l=this._createCompletionMessage(e.invocationId,`${a}`,null):c!==void 0?l=this._createCompletionMessage(e.invocationId,null,c):(this._logger.log(r.Warning,`No result given for '${t}' method and invocation ID '${e.invocationId}'.`),l=this._createCompletionMessage(e.invocationId,"Client didn't provide a result.",null)),await this._sendWithProtocol(l)):c&&this._logger.log(r.Error,`Result given for '${t}' method but server is not expecting a result.`)}_connectionClosed(e){this._logger.log(r.Debug,`HubConnection.connectionClosed(${e}) called while in state ${this._connectionState}.`),this._stopDuringStartError=this._stopDuringStartError||e||new w("The underlying connection was closed before the hub handshake could complete."),this._handshakeResolver&&this._handshakeResolver(),this._cancelCallbacksWithError(e||new Error("Invocation canceled due to the underlying connection being closed.")),this._cleanupTimeout(),this._cleanupPingTimer(),this._connectionState===g.Disconnecting?this._completeClose(e):this._connectionState===g.Connected&&this._reconnectPolicy?this._reconnect(e):this._connectionState===g.Connected&&this._completeClose(e)}_completeClose(e){if(this._connectionStarted){this._connectionState=g.Disconnected,this._connectionStarted=!1,this._messageBuffer&&(this._messageBuffer._dispose(e??new Error("Connection closed.")),this._messageBuffer=void 0),f.isBrowser&&window.document.removeEventListener("freeze",this._freezeEventListener);try{this._closedCallbacks.forEach(t=>t.apply(this,[e]))}catch(t){this._logger.log(r.Error,`An onclose callback called with error '${e}' threw error '${t}'.`)}}}async _reconnect(e){const t=Date.now();let n=0,s=e!==void 0?e:new Error("Attempting to reconnect due to a unknown error."),i=this._getNextRetryDelay(n++,0,s);if(i===null){this._logger.log(r.Debug,"Connection not reconnecting because the IRetryPolicy returned null on the first reconnect attempt."),this._completeClose(e);return}if(this._connectionState=g.Reconnecting,e?this._logger.log(r.Information,`Connection reconnecting because of error '${e}'.`):this._logger.log(r.Information,"Connection reconnecting."),this._reconnectingCallbacks.length!==0){try{this._reconnectingCallbacks.forEach(c=>c.apply(this,[e]))}catch(c){this._logger.log(r.Error,`An onreconnecting callback called with error '${e}' threw error '${c}'.`)}if(this._connectionState!==g.Reconnecting){this._logger.log(r.Debug,"Connection left the reconnecting state in onreconnecting callback. Done reconnecting.");return}}for(;i!==null;){if(this._logger.log(r.Information,`Reconnect attempt number ${n} will start in ${i} ms.`),await new Promise(c=>{this._reconnectDelayHandle=setTimeout(c,i)}),this._reconnectDelayHandle=void 0,this._connectionState!==g.Reconnecting){this._logger.log(r.Debug,"Connection left the reconnecting state during reconnect delay. Done reconnecting.");return}try{if(await this._startInternal(),this._connectionState=g.Connected,this._logger.log(r.Information,"HubConnection reconnected successfully."),this._reconnectedCallbacks.length!==0)try{this._reconnectedCallbacks.forEach(c=>c.apply(this,[this.connection.connectionId]))}catch(c){this._logger.log(r.Error,`An onreconnected callback called with connectionId '${this.connection.connectionId}; threw error '${c}'.`)}return}catch(c){if(this._logger.log(r.Information,`Reconnect attempt failed because of error '${c}'.`),this._connectionState!==g.Reconnecting){this._logger.log(r.Debug,`Connection moved to the '${this._connectionState}' from the reconnecting state during reconnect attempt. Done reconnecting.`),this._connectionState===g.Disconnecting&&this._completeClose();return}s=c instanceof Error?c:new Error(c.toString()),i=this._getNextRetryDelay(n++,Date.now()-t,s)}}this._logger.log(r.Information,`Reconnect retries have been exhausted after ${Date.now()-t} ms and ${n} failed attempts. Connection disconnecting.`),this._completeClose()}_getNextRetryDelay(e,t,n){try{return this._reconnectPolicy.nextRetryDelayInMilliseconds({elapsedMilliseconds:t,previousRetryCount:e,retryReason:n})}catch(s){return this._logger.log(r.Error,`IRetryPolicy.nextRetryDelayInMilliseconds(${e}, ${t}) threw error '${s}'.`),null}}_cancelCallbacksWithError(e){const t=this._callbacks;this._callbacks={},Object.keys(t).forEach(n=>{const s=t[n];try{s(null,e)}catch(i){this._logger.log(r.Error,`Stream 'error' callback called with '${e}' threw error: ${ee(i)}`)}})}_cleanupPingTimer(){this._pingServerHandle&&(clearTimeout(this._pingServerHandle),this._pingServerHandle=void 0)}_cleanupTimeout(){this._timeoutHandle&&clearTimeout(this._timeoutHandle)}_createInvocation(e,t,n,s){if(n)return s.length!==0?{arguments:t,streamIds:s,target:e,type:u.Invocation}:{arguments:t,target:e,type:u.Invocation};{const i=this._invocationId;return this._invocationId++,s.length!==0?{arguments:t,invocationId:i.toString(),streamIds:s,target:e,type:u.Invocation}:{arguments:t,invocationId:i.toString(),target:e,type:u.Invocation}}}_launchStreams(e,t){if(e.length!==0){t||(t=Promise.resolve());for(const n in e)e[n].subscribe({complete:()=>{t=t.then(()=>this._sendWithProtocol(this._createCompletionMessage(n)))},error:s=>{let i;s instanceof Error?i=s.message:s&&s.toString?i=s.toString():i="Unknown error",t=t.then(()=>this._sendWithProtocol(this._createCompletionMessage(n,i)))},next:s=>{t=t.then(()=>this._sendWithProtocol(this._createStreamItemMessage(n,s)))}})}}_replaceStreamingParams(e){const t=[],n=[];for(let s=0;s<e.length;s++){const i=e[s];if(this._isObservable(i)){const c=this._invocationId;this._invocationId++,t[c]=i,n.push(c.toString()),e.splice(s,1)}}return[t,n]}_isObservable(e){return e&&e.subscribe&&typeof e.subscribe=="function"}_createStreamInvocation(e,t,n){const s=this._invocationId;return this._invocationId++,n.length!==0?{arguments:t,invocationId:s.toString(),streamIds:n,target:e,type:u.StreamInvocation}:{arguments:t,invocationId:s.toString(),target:e,type:u.StreamInvocation}}_createCancelInvocation(e){return{invocationId:e,type:u.CancelInvocation}}_createStreamItemMessage(e,t){return{invocationId:e,item:t,type:u.StreamItem}}_createCompletionMessage(e,t,n){return t?{error:t,invocationId:e,type:u.Completion}:{invocationId:e,result:n,type:u.Completion}}_createCloseMessage(){return{type:u.Close}}}const ft=[0,2e3,1e4,3e4,null];class ne{constructor(e){this._retryDelays=e!==void 0?[...e,null]:ft}nextRetryDelayInMilliseconds(e){return this._retryDelays[e.previousRetryCount]}}class k{}k.Authorization="Authorization";k.Cookie="Cookie";class pt extends L{constructor(e,t){super(),this._innerClient=e,this._accessTokenFactory=t}async send(e){let t=!0;this._accessTokenFactory&&(!this._accessToken||e.url&&e.url.indexOf("/negotiate?")>0)&&(t=!1,this._accessToken=await this._accessTokenFactory()),this._setAuthorizationHeader(e);const n=await this._innerClient.send(e);return t&&n.statusCode===401&&this._accessTokenFactory?(this._accessToken=await this._accessTokenFactory(),this._setAuthorizationHeader(e),await this._innerClient.send(e)):n}_setAuthorizationHeader(e){e.headers||(e.headers={}),this._accessToken?e.headers[k.Authorization]=`Bearer ${this._accessToken}`:this._accessTokenFactory&&e.headers[k.Authorization]&&delete e.headers[k.Authorization]}getCookieString(e){return this._innerClient.getCookieString(e)}}var _;(function(o){o[o.None=0]="None",o[o.WebSockets=1]="WebSockets",o[o.ServerSentEvents=2]="ServerSentEvents",o[o.LongPolling=4]="LongPolling"})(_||(_={}));var m;(function(o){o[o.Text=1]="Text",o[o.Binary=2]="Binary"})(m||(m={}));let _t=class{constructor(){this._isAborted=!1,this.onabort=null}abort(){this._isAborted||(this._isAborted=!0,this.onabort&&this.onabort())}get signal(){return this}get aborted(){return this._isAborted}};class oe{get pollAborted(){return this._pollAbort.aborted}constructor(e,t,n){this._httpClient=e,this._logger=t,this._pollAbort=new _t,this._options=n,this._running=!1,this.onreceive=null,this.onclose=null}async connect(e,t){if(p.isRequired(e,"url"),p.isRequired(t,"transferFormat"),p.isIn(t,m,"transferFormat"),this._url=e,this._logger.log(r.Trace,"(LongPolling transport) Connecting."),t===m.Binary&&typeof XMLHttpRequest<"u"&&typeof new XMLHttpRequest().responseType!="string")throw new Error("Binary protocols over XmlHttpRequest not implementing advanced features are not supported.");const[n,s]=E(),i={[n]:s,...this._options.headers},c={abortSignal:this._pollAbort.signal,headers:i,timeout:1e5,withCredentials:this._options.withCredentials};t===m.Binary&&(c.responseType="arraybuffer");const a=`${e}&_=${Date.now()}`;this._logger.log(r.Trace,`(LongPolling transport) polling: ${a}.`);const l=await this._httpClient.get(a,c);l.statusCode!==200?(this._logger.log(r.Error,`(LongPolling transport) Unexpected response code: ${l.statusCode}.`),this._closeError=new I(l.statusText||"",l.statusCode),this._running=!1):this._running=!0,this._receiving=this._poll(this._url,c)}async _poll(e,t){try{for(;this._running;)try{const n=`${e}&_=${Date.now()}`;this._logger.log(r.Trace,`(LongPolling transport) polling: ${n}.`);const s=await this._httpClient.get(n,t);s.statusCode===204?(this._logger.log(r.Information,"(LongPolling transport) Poll terminated by server."),this._running=!1):s.statusCode!==200?(this._logger.log(r.Error,`(LongPolling transport) Unexpected response code: ${s.statusCode}.`),this._closeError=new I(s.statusText||"",s.statusCode),this._running=!1):s.content?(this._logger.log(r.Trace,`(LongPolling transport) data received. ${R(s.content,this._options.logMessageContent)}.`),this.onreceive&&this.onreceive(s.content)):this._logger.log(r.Trace,"(LongPolling transport) Poll timed out, reissuing.")}catch(n){this._running?n instanceof j?this._logger.log(r.Trace,"(LongPolling transport) Poll timed out, reissuing."):(this._closeError=n,this._running=!1):this._logger.log(r.Trace,`(LongPolling transport) Poll errored after shutdown: ${n.message}`)}}finally{this._logger.log(r.Trace,"(LongPolling transport) Polling complete."),this.pollAborted||this._raiseOnClose()}}async send(e){return this._running?de(this._logger,"LongPolling",this._httpClient,this._url,e,this._options):Promise.reject(new Error("Cannot send until the transport is connected"))}async stop(){this._logger.log(r.Trace,"(LongPolling transport) Stopping polling."),this._running=!1,this._pollAbort.abort();try{await this._receiving,this._logger.log(r.Trace,`(LongPolling transport) sending DELETE request to ${this._url}.`);const e={},[t,n]=E();e[t]=n;const s={headers:{...e,...this._options.headers},timeout:this._options.timeout,withCredentials:this._options.withCredentials};let i;try{await this._httpClient.delete(this._url,s)}catch(c){i=c}i?i instanceof I&&(i.statusCode===404?this._logger.log(r.Trace,"(LongPolling transport) A 404 response was returned from sending a DELETE request."):this._logger.log(r.Trace,`(LongPolling transport) Error sending a DELETE request: ${i}`)):this._logger.log(r.Trace,"(LongPolling transport) DELETE request accepted.")}finally{this._logger.log(r.Trace,"(LongPolling transport) Stop finished."),this._raiseOnClose()}}_raiseOnClose(){if(this.onclose){let e="(LongPolling transport) Firing onclose event.";this._closeError&&(e+=" Error: "+this._closeError),this._logger.log(r.Trace,e),this.onclose(this._closeError)}}}class mt{constructor(e,t,n,s){this._httpClient=e,this._accessToken=t,this._logger=n,this._options=s,this.onreceive=null,this.onclose=null}async connect(e,t){return p.isRequired(e,"url"),p.isRequired(t,"transferFormat"),p.isIn(t,m,"transferFormat"),this._logger.log(r.Trace,"(SSE transport) Connecting."),this._url=e,this._accessToken&&(e+=(e.indexOf("?")<0?"?":"&")+`access_token=${encodeURIComponent(this._accessToken)}`),new Promise((n,s)=>{let i=!1;if(t!==m.Text){s(new Error("The Server-Sent Events transport only supports the 'Text' transfer format"));return}let c;if(f.isBrowser||f.isWebWorker)c=new this._options.EventSource(e,{withCredentials:this._options.withCredentials});else{const a=this._httpClient.getCookieString(e),l={};l.Cookie=a;const[h,d]=E();l[h]=d,c=new this._options.EventSource(e,{withCredentials:this._options.withCredentials,headers:{...l,...this._options.headers}})}try{c.onmessage=a=>{if(this.onreceive)try{this._logger.log(r.Trace,`(SSE transport) data received. ${R(a.data,this._options.logMessageContent)}.`),this.onreceive(a.data)}catch(l){this._close(l);return}},c.onerror=a=>{i?this._close():s(new Error("EventSource failed to connect. The connection could not be found on the server, either the connection ID is not present on the server, or a proxy is refusing/buffering the connection. If you have multiple servers check that sticky sessions are enabled."))},c.onopen=()=>{this._logger.log(r.Information,`SSE connected to ${this._url}`),this._eventSource=c,i=!0,n()}}catch(a){s(a);return}})}async send(e){return this._eventSource?de(this._logger,"SSE",this._httpClient,this._url,e,this._options):Promise.reject(new Error("Cannot send until the transport is connected"))}stop(){return this._close(),Promise.resolve()}_close(e){this._eventSource&&(this._eventSource.close(),this._eventSource=void 0,this.onclose&&this.onclose(e))}}class bt{constructor(e,t,n,s,i,c){this._logger=n,this._accessTokenFactory=t,this._logMessageContent=s,this._webSocketConstructor=i,this._httpClient=e,this.onreceive=null,this.onclose=null,this._headers=c}async connect(e,t){p.isRequired(e,"url"),p.isRequired(t,"transferFormat"),p.isIn(t,m,"transferFormat"),this._logger.log(r.Trace,"(WebSockets transport) Connecting.");let n;return this._accessTokenFactory&&(n=await this._accessTokenFactory()),new Promise((s,i)=>{e=e.replace(/^http/,"ws");let c;const a=this._httpClient.getCookieString(e);let l=!1;if(f.isNode||f.isReactNative){const h={},[d,S]=E();h[d]=S,n&&(h[k.Authorization]=`Bearer ${n}`),a&&(h[k.Cookie]=a),c=new this._webSocketConstructor(e,void 0,{headers:{...h,...this._headers}})}else n&&(e+=(e.indexOf("?")<0?"?":"&")+`access_token=${encodeURIComponent(n)}`);c||(c=new this._webSocketConstructor(e)),t===m.Binary&&(c.binaryType="arraybuffer"),c.onopen=h=>{this._logger.log(r.Information,`WebSocket connected to ${e}.`),this._webSocket=c,l=!0,s()},c.onerror=h=>{let d=null;typeof ErrorEvent<"u"&&h instanceof ErrorEvent?d=h.error:d="There was an error with the transport",this._logger.log(r.Information,`(WebSockets transport) ${d}.`)},c.onmessage=h=>{if(this._logger.log(r.Trace,`(WebSockets transport) data received. ${R(h.data,this._logMessageContent)}.`),this.onreceive)try{this.onreceive(h.data)}catch(d){this._close(d);return}},c.onclose=h=>{if(l)this._close(h);else{let d=null;typeof ErrorEvent<"u"&&h instanceof ErrorEvent?d=h.error:d="WebSocket failed to connect. The connection could not be found on the server, either the endpoint may not be a SignalR endpoint, the connection ID is not present on the server, or there is a proxy blocking WebSockets. If you have multiple servers check that sticky sessions are enabled.",i(new Error(d))}}})}send(e){return this._webSocket&&this._webSocket.readyState===this._webSocketConstructor.OPEN?(this._logger.log(r.Trace,`(WebSockets transport) sending data. ${R(e,this._logMessageContent)}.`),this._webSocket.send(e),Promise.resolve()):Promise.reject("WebSocket is not in the OPEN state")}stop(){return this._webSocket&&this._close(void 0),Promise.resolve()}_close(e){this._webSocket&&(this._webSocket.onclose=()=>{},this._webSocket.onmessage=()=>{},this._webSocket.onerror=()=>{},this._webSocket.close(),this._webSocket=void 0),this._logger.log(r.Trace,"(WebSockets transport) socket closed."),this.onclose&&(this._isCloseEvent(e)&&(e.wasClean===!1||e.code!==1e3)?this.onclose(new Error(`WebSocket closed with status code: ${e.code} (${e.reason||"no reason given"}).`)):e instanceof Error?this.onclose(e):this.onclose())}_isCloseEvent(e){return e&&typeof e.wasClean=="boolean"&&typeof e.code=="number"}}const se=100;class wt{constructor(e,t={}){if(this._stopPromiseResolver=()=>{},this.features={},this._negotiateVersion=1,p.isRequired(e,"url"),this._logger=Ge(t.logger),this.baseUrl=this._resolveUrl(e),t=t||{},t.logMessageContent=t.logMessageContent===void 0?!1:t.logMessageContent,typeof t.withCredentials=="boolean"||t.withCredentials===void 0)t.withCredentials=t.withCredentials===void 0?!0:t.withCredentials;else throw new Error("withCredentials option was not a 'boolean' or 'undefined' value");t.timeout=t.timeout===void 0?100*1e3:t.timeout;let n=null,s=null;f.isNode&&typeof require<"u"&&(n=nt(),s=ot()),!f.isNode&&typeof WebSocket<"u"&&!t.WebSocket?t.WebSocket=WebSocket:f.isNode&&!t.WebSocket&&n&&(t.WebSocket=n),!f.isNode&&typeof EventSource<"u"&&!t.EventSource?t.EventSource=EventSource:f.isNode&&!t.EventSource&&typeof s<"u"&&(t.EventSource=s),this._httpClient=new pt(t.httpClient||new rt(this._logger),t.accessTokenFactory),this._connectionState="Disconnected",this._connectionStarted=!1,this._options=t,this.onreceive=null,this.onclose=null}async start(e){if(e=e||m.Binary,p.isIn(e,m,"transferFormat"),this._logger.log(r.Debug,`Starting connection with transfer format '${m[e]}'.`),this._connectionState!=="Disconnected")return Promise.reject(new Error("Cannot start an HttpConnection that is not in the 'Disconnected' state."));if(this._connectionState="Connecting",this._startInternalPromise=this._startInternal(e),await this._startInternalPromise,this._connectionState==="Disconnecting"){const t="Failed to start the HttpConnection before stop() was called.";return this._logger.log(r.Error,t),await this._stopPromise,Promise.reject(new w(t))}else if(this._connectionState!=="Connected"){const t="HttpConnection.startInternal completed gracefully but didn't enter the connection into the connected state!";return this._logger.log(r.Error,t),Promise.reject(new w(t))}this._connectionStarted=!0}send(e){return this._connectionState!=="Connected"?Promise.reject(new Error("Cannot send data if the connection is not in the 'Connected' State.")):(this._sendQueue||(this._sendQueue=new q(this.transport)),this._sendQueue.send(e))}async stop(e){if(this._connectionState==="Disconnected")return this._logger.log(r.Debug,`Call to HttpConnection.stop(${e}) ignored because the connection is already in the disconnected state.`),Promise.resolve();if(this._connectionState==="Disconnecting")return this._logger.log(r.Debug,`Call to HttpConnection.stop(${e}) ignored because the connection is already in the disconnecting state.`),this._stopPromise;this._connectionState="Disconnecting",this._stopPromise=new Promise(t=>{this._stopPromiseResolver=t}),await this._stopInternal(e),await this._stopPromise}async _stopInternal(e){this._stopError=e;try{await this._startInternalPromise}catch{}if(this.transport){try{await this.transport.stop()}catch(t){this._logger.log(r.Error,`HttpConnection.transport.stop() threw error '${t}'.`),this._stopConnection()}this.transport=void 0}else this._logger.log(r.Debug,"HttpConnection.transport is undefined in HttpConnection.stop() because start() failed.")}async _startInternal(e){let t=this.baseUrl;this._accessTokenFactory=this._options.accessTokenFactory,this._httpClient._accessTokenFactory=this._accessTokenFactory;try{if(this._options.skipNegotiation)if(this._options.transport===_.WebSockets)this.transport=this._constructTransport(_.WebSockets),await this._startTransport(t,e);else throw new Error("Negotiation can only be skipped when using the WebSocket transport directly.");else{let n=null,s=0;do{if(n=await this._getNegotiationResponse(t),this._connectionState==="Disconnecting"||this._connectionState==="Disconnected")throw new w("The connection was stopped during negotiation.");if(n.error)throw new Error(n.error);if(n.ProtocolVersion)throw new Error("Detected a connection attempt to an ASP.NET SignalR Server. This client only supports connecting to an ASP.NET Core SignalR Server. See https://aka.ms/signalr-core-differences for details.");if(n.url&&(t=n.url),n.accessToken){const i=n.accessToken;this._accessTokenFactory=()=>i,this._httpClient._accessToken=i,this._httpClient._accessTokenFactory=void 0}s++}while(n.url&&s<se);if(s===se&&n.url)throw new Error("Negotiate redirection limit exceeded.");await this._createTransport(t,this._options.transport,n,e)}this.transport instanceof oe&&(this.features.inherentKeepAlive=!0),this._connectionState==="Connecting"&&(this._logger.log(r.Debug,"The HttpConnection connected successfully."),this._connectionState="Connected")}catch(n){return this._logger.log(r.Error,"Failed to start the connection: "+n),this._connectionState="Disconnected",this.transport=void 0,this._stopPromiseResolver(),Promise.reject(n)}}async _getNegotiationResponse(e){const t={},[n,s]=E();t[n]=s;const i=this._resolveNegotiateUrl(e);this._logger.log(r.Debug,`Sending negotiation request: ${i}.`);try{const c=await this._httpClient.post(i,{content:"",headers:{...t,...this._options.headers},timeout:this._options.timeout,withCredentials:this._options.withCredentials});if(c.statusCode!==200)return Promise.reject(new Error(`Unexpected status code returned from negotiate '${c.statusCode}'`));const a=JSON.parse(c.content);return(!a.negotiateVersion||a.negotiateVersion<1)&&(a.connectionToken=a.connectionId),a.useStatefulReconnect&&this._options._useStatefulReconnect!==!0?Promise.reject(new Z("Client didn't negotiate Stateful Reconnect but the server did.")):a}catch(c){let a="Failed to complete negotiation with the server: "+c;return c instanceof I&&c.statusCode===404&&(a=a+" Either this is not a SignalR endpoint or there is a proxy blocking the connection."),this._logger.log(r.Error,a),Promise.reject(new Z(a))}}_createConnectUrl(e,t){return t?e+(e.indexOf("?")===-1?"?":"&")+`id=${t}`:e}async _createTransport(e,t,n,s){let i=this._createConnectUrl(e,n.connectionToken);if(this._isITransport(t)){this._logger.log(r.Debug,"Connection was provided an instance of ITransport, using that directly."),this.transport=t,await this._startTransport(i,s),this.connectionId=n.connectionId;return}const c=[],a=n.availableTransports||[];let l=n;for(const h of a){const d=this._resolveTransportOrError(h,t,s,(l==null?void 0:l.useStatefulReconnect)===!0);if(d instanceof Error)c.push(`${h.transport} failed:`),c.push(d);else if(this._isITransport(d)){if(this.transport=d,!l){try{l=await this._getNegotiationResponse(e)}catch(S){return Promise.reject(S)}i=this._createConnectUrl(e,l.connectionToken)}try{await this._startTransport(i,s),this.connectionId=l.connectionId;return}catch(S){if(this._logger.log(r.Error,`Failed to start the transport '${h.transport}': ${S}`),l=void 0,c.push(new je(`${h.transport} failed: ${S}`,_[h.transport])),this._connectionState!=="Connecting"){const U="Failed to select transport before stop() was called.";return this._logger.log(r.Debug,U),Promise.reject(new w(U))}}}}return c.length>0?Promise.reject(new Ve(`Unable to connect to the server with any of the available transports. ${c.join(" ")}`,c)):Promise.reject(new Error("None of the transports supported by the client are supported by the server."))}_constructTransport(e){switch(e){case _.WebSockets:if(!this._options.WebSocket)throw new Error("'WebSocket' is not supported in your environment.");return new bt(this._httpClient,this._accessTokenFactory,this._logger,this._options.logMessageContent,this._options.WebSocket,this._options.headers||{});case _.ServerSentEvents:if(!this._options.EventSource)throw new Error("'EventSource' is not supported in your environment.");return new mt(this._httpClient,this._httpClient._accessToken,this._logger,this._options);case _.LongPolling:return new oe(this._httpClient,this._logger,this._options);default:throw new Error(`Unknown transport: ${e}.`)}}_startTransport(e,t){return this.transport.onreceive=this.onreceive,this.features.reconnect?this.transport.onclose=async n=>{let s=!1;if(this.features.reconnect)try{this.features.disconnected(),await this.transport.connect(e,t),await this.features.resend()}catch{s=!0}else{this._stopConnection(n);return}s&&this._stopConnection(n)}:this.transport.onclose=n=>this._stopConnection(n),this.transport.connect(e,t)}_resolveTransportOrError(e,t,n,s){const i=_[e.transport];if(i==null)return this._logger.log(r.Debug,`Skipping transport '${e.transport}' because it is not supported by this client.`),new Error(`Skipping transport '${e.transport}' because it is not supported by this client.`);if(St(t,i))if(e.transferFormats.map(a=>m[a]).indexOf(n)>=0){if(i===_.WebSockets&&!this._options.WebSocket||i===_.ServerSentEvents&&!this._options.EventSource)return this._logger.log(r.Debug,`Skipping transport '${_[i]}' because it is not supported in your environment.'`),new Be(`'${_[i]}' is not supported in your environment.`,i);this._logger.log(r.Debug,`Selecting transport '${_[i]}'.`);try{return this.features.reconnect=i===_.WebSockets?s:void 0,this._constructTransport(i)}catch(a){return a}}else return this._logger.log(r.Debug,`Skipping transport '${_[i]}' because it does not support the requested transfer format '${m[n]}'.`),new Error(`'${_[i]}' does not support ${m[n]}.`);else return this._logger.log(r.Debug,`Skipping transport '${_[i]}' because it was disabled by the client.`),new Fe(`'${_[i]}' is disabled by the client.`,i)}_isITransport(e){return e&&typeof e=="object"&&"connect"in e}_stopConnection(e){if(this._logger.log(r.Debug,`HttpConnection.stopConnection(${e}) called while in state ${this._connectionState}.`),this.transport=void 0,e=this._stopError||e,this._stopError=void 0,this._connectionState==="Disconnected"){this._logger.log(r.Debug,`Call to HttpConnection.stopConnection(${e}) was ignored because the connection is already in the disconnected state.`);return}if(this._connectionState==="Connecting")throw this._logger.log(r.Warning,`Call to HttpConnection.stopConnection(${e}) was ignored because the connection is still in the connecting state.`),new Error(`HttpConnection.stopConnection(${e}) was called while the connection is still in the connecting state.`);if(this._connectionState==="Disconnecting"&&this._stopPromiseResolver(),e?this._logger.log(r.Error,`Connection disconnected with error '${e}'.`):this._logger.log(r.Information,"Connection disconnected."),this._sendQueue&&(this._sendQueue.stop().catch(t=>{this._logger.log(r.Error,`TransportSendQueue.stop() threw error '${t}'.`)}),this._sendQueue=void 0),this.connectionId=void 0,this._connectionState="Disconnected",this._connectionStarted){this._connectionStarted=!1;try{this.onclose&&this.onclose(e)}catch(t){this._logger.log(r.Error,`HttpConnection.onclose(${e}) threw error '${t}'.`)}}}_resolveUrl(e){if(e.lastIndexOf("https://",0)===0||e.lastIndexOf("http://",0)===0)return e;if(!f.isBrowser)throw new Error(`Cannot resolve '${e}'.`);const t=window.document.createElement("a");return t.href=e,this._logger.log(r.Information,`Normalizing '${e}' to '${t.href}'.`),t.href}_resolveNegotiateUrl(e){const t=new URL(e);t.pathname.endsWith("/")?t.pathname+="negotiate":t.pathname+="/negotiate";const n=new URLSearchParams(t.searchParams);return n.has("negotiateVersion")||n.append("negotiateVersion",this._negotiateVersion.toString()),n.has("useStatefulReconnect")?n.get("useStatefulReconnect")==="true"&&(this._options._useStatefulReconnect=!0):this._options._useStatefulReconnect===!0&&n.append("useStatefulReconnect","true"),t.search=n.toString(),t.toString()}}function St(o,e){return!o||(e&o)!==0}class q{constructor(e){this._transport=e,this._buffer=[],this._executing=!0,this._sendBufferedData=new A,this._transportResult=new A,this._sendLoopPromise=this._sendLoop()}send(e){return this._bufferData(e),this._transportResult||(this._transportResult=new A),this._transportResult.promise}stop(){return this._executing=!1,this._sendBufferedData.resolve(),this._sendLoopPromise}_bufferData(e){if(this._buffer.length&&typeof this._buffer[0]!=typeof e)throw new Error(`Expected data to be of type ${typeof this._buffer} but was of type ${typeof e}`);this._buffer.push(e),this._sendBufferedData.resolve()}async _sendLoop(){for(;;){if(await this._sendBufferedData.promise,!this._executing){this._transportResult&&this._transportResult.reject("Connection stopped.");break}this._sendBufferedData=new A;const e=this._transportResult;this._transportResult=void 0;const t=typeof this._buffer[0]=="string"?this._buffer.join(""):q._concatBuffers(this._buffer);this._buffer.length=0;try{await this._transport.send(t),e.resolve()}catch(n){e.reject(n)}}}static _concatBuffers(e){const t=e.map(i=>i.byteLength).reduce((i,c)=>i+c),n=new Uint8Array(t);let s=0;for(const i of e)n.set(new Uint8Array(i),s),s+=i.byteLength;return n.buffer}}class A{constructor(){this.promise=new Promise((e,t)=>[this._resolver,this._rejecter]=[e,t])}resolve(){this._resolver()}reject(e){this._rejecter(e)}}const vt="json";class yt{constructor(){this.name=vt,this.version=2,this.transferFormat=m.Text}parseMessages(e,t){if(typeof e!="string")throw new Error("Invalid input for JSON hub protocol. Expected a string.");if(!e)return[];t===null&&(t=P.instance);const n=b.parse(e),s=[];for(const i of n){const c=JSON.parse(i);if(typeof c.type!="number")throw new Error("Invalid payload.");switch(c.type){case u.Invocation:this._isInvocationMessage(c);break;case u.StreamItem:this._isStreamItemMessage(c);break;case u.Completion:this._isCompletionMessage(c);break;case u.Ping:break;case u.Close:break;case u.Ack:this._isAckMessage(c);break;case u.Sequence:this._isSequenceMessage(c);break;default:t.log(r.Information,"Unknown message type '"+c.type+"' ignored.");continue}s.push(c)}return s}writeMessage(e){return b.write(JSON.stringify(e))}_isInvocationMessage(e){this._assertNotEmptyString(e.target,"Invalid payload for Invocation message."),e.invocationId!==void 0&&this._assertNotEmptyString(e.invocationId,"Invalid payload for Invocation message.")}_isStreamItemMessage(e){if(this._assertNotEmptyString(e.invocationId,"Invalid payload for StreamItem message."),e.item===void 0)throw new Error("Invalid payload for StreamItem message.")}_isCompletionMessage(e){if(e.result&&e.error)throw new Error("Invalid payload for Completion message.");!e.result&&e.error&&this._assertNotEmptyString(e.error,"Invalid payload for Completion message."),this._assertNotEmptyString(e.invocationId,"Invalid payload for Completion message.")}_isAckMessage(e){if(typeof e.sequenceId!="number")throw new Error("Invalid SequenceId for Ack message.")}_isSequenceMessage(e){if(typeof e.sequenceId!="number")throw new Error("Invalid SequenceId for Sequence message.")}_assertNotEmptyString(e,t){if(typeof e!="string"||e==="")throw new Error(t)}}const Ct={trace:r.Trace,debug:r.Debug,info:r.Information,information:r.Information,warn:r.Warning,warning:r.Warning,error:r.Error,critical:r.Critical,none:r.None};function It(o){const e=Ct[o.toLowerCase()];if(typeof e<"u")return e;throw new Error(`Unknown log level: ${o}`)}class kt{configureLogging(e){if(p.isRequired(e,"logging"),Tt(e))this.logger=e;else if(typeof e=="string"){const t=It(e);this.logger=new O(t)}else this.logger=new O(e);return this}withUrl(e,t){return p.isRequired(e,"url"),p.isNotEmpty(e,"url"),this.url=e,typeof t=="object"?this.httpConnectionOptions={...this.httpConnectionOptions,...t}:this.httpConnectionOptions={...this.httpConnectionOptions,transport:t},this}withHubProtocol(e){return p.isRequired(e,"protocol"),this.protocol=e,this}withAutomaticReconnect(e){if(this.reconnectPolicy)throw new Error("A reconnectPolicy has already been set.");return e?Array.isArray(e)?this.reconnectPolicy=new ne(e):this.reconnectPolicy=e:this.reconnectPolicy=new ne,this}withServerTimeout(e){return p.isRequired(e,"milliseconds"),this._serverTimeoutInMilliseconds=e,this}withKeepAliveInterval(e){return p.isRequired(e,"milliseconds"),this._keepAliveIntervalInMilliseconds=e,this}withStatefulReconnect(e){return this.httpConnectionOptions===void 0&&(this.httpConnectionOptions={}),this.httpConnectionOptions._useStatefulReconnect=!0,this._statefulReconnectBufferSize=e==null?void 0:e.bufferSize,this}build(){const e=this.httpConnectionOptions||{};if(e.logger===void 0&&(e.logger=this.logger),!this.url)throw new Error("The 'HubConnectionBuilder.withUrl' method must be called before building the connection.");const t=new wt(this.url,e);return V.create(t,this.logger||P.instance,this.protocol||new yt,this.reconnectPolicy,this._serverTimeoutInMilliseconds,this._keepAliveIntervalInMilliseconds,this._statefulReconnectBufferSize)}}function Tt(o){return o.log!==void 0}class N{static create(e,t,n){let s=null,i=!1,c=0,a=H([]);return()=>{const l=async()=>{s||(s=new kt().withUrl(typeof e=="string"?e:e()).configureLogging(r.Warning).withAutomaticReconnect().build(),t(s,{isWatched:y=>a.value.includes(y),hasWatchers:()=>c>0})),s.state!==g.Connected&&await s.start(),i||(await n(s),i=!0)},h=async()=>{s&&(await s.stop(),s=null)},d=be(()=>a.value.length>0||c>0);return ae(d,async y=>{y?await l():await h()},{immediate:!0}),{subscribeToOne:y=>{a.value.push(y)},unsubscribeFromOne:y=>{const X=a.value.indexOf(y);X>-1&&(a.value=a.value.splice(X,1))},subscribeToMany:()=>{c++},unsubscribeFromMany:()=>{c--}}}}static createWatcher(e){return()=>{const{subscribeToOne:t,unsubscribeFromOne:n,subscribeToMany:s,unsubscribeFromMany:i}=e(),c=H(!1),a=H([]);return we(()=>{c.value&&i();for(let d of a.value)n(d)}),{watchOne:d=>{t(d),a.value.push(d)},watchMany:()=>{c.value===!1&&(s(),c.value=!0)}}}}}const ge="Subscribe",Et="UpdateDeviceStatus",Dt="UpdateDeviceConnectivity",fe=new D("deviceConnectivity",B).create(o=>o.build(o.addGet(Ue),o.addNotify(e=>({notifyUpdate:t=>e.notify("update",t)})))),Pt=N.create(He,o=>{o.on(Dt,e=>fe.notifyUpdate(new B(e)))},async o=>{await o.invoke(ge)}),Rt=$.track(fe),$t=N.createWatcher(Pt),pe=new D("deviceStatus",F).create(o=>o.build(o.addGet(Me),o.addNotify(e=>({notifyUpdate:t=>e.notify("update",t)})))),At=N.create(We,o=>{o.on(Et,e=>pe.notifyUpdate(new F(e)))},async o=>{await o.invoke(ge)}),xt=$.track(pe),Ot=N.createWatcher(At),z=new D("deviceOrganisation",M).create(o=>o.build(o.addGet(C),o.addGetMany(W,he),o.addCreate(W),o.addUpdate(C),o.addRemove(C),o.addNotify(e=>({...D.addCustom("changeGroup",(t,n,s)=>t.put(Le(n),s),t=>{const n=new M(t);return e.notify("update",n),n}),...D.addCustom("changeLocation",(t,n,s)=>t.put(Ne(n),s),t=>{const n=new M(t);return e.notify("update",n),n})})))),G=()=>{const{track:o}=xt(),{track:e}=Rt(),{watchOne:t}=Ot(),{watchOne:n}=$t();return s=>{t(s.value.status.id),n(s.value.connectivity.id),o(s.value.status,i=>s.value.status=i),e(s.value.connectivity,i=>s.value.connectivity=i)}},Lt=$.get(z,G);$.custom(z.changeGroup,G);$.custom(z.changeLocation,G);const _e=Se({name:"FSDeviceOrganisationTile",components:{FSDeviceOrganisationTileUI:Ie,FSLoadTile:ke},props:{deviceOrganisationId:{type:String,required:!0},modelValue:{type:Boolean,required:!1,default:!1},editable:{type:Boolean,required:!1,default:!0}},setup(o){const{get:e,getting:t,entity:n}=Lt();return ve(()=>{e(o.deviceOrganisationId)}),ae(()=>o.deviceOrganisationId,()=>{e(o.deviceOrganisationId)}),{getting:t,entity:n}}});function Nt(o,e,t,n,s,i){var l;const c=K("FSLoadTile"),a=K("FSDeviceOrganisationTileUI");return o.getting?(J(),Y(c,{key:0,editable:o.$props.editable,modelValue:o.$props.modelValue,"onUpdate:modelValue":e[0]||(e[0]=h=>o.$emit("update:modelValue",h))},null,8,["editable","modelValue"])):o.entity?(J(),Y(a,ye({key:1,imageId:o.entity.imageId,label:o.entity.label,code:o.entity.code,deviceConnectivity:o.entity.connectivity,deviceWorstAlert:o.entity.worstAlert,deviceAlerts:o.entity.alerts,modelStatuses:o.entity.modelStatuses,deviceStatuses:(l=o.entity.status)==null?void 0:l.statuses,editable:o.$props.editable,modelValue:o.$props.modelValue,"onUpdate:modelValue":e[1]||(e[1]=h=>o.$emit("update:modelValue",h))},o.$attrs),null,16,["imageId","label","code","deviceConnectivity","deviceWorstAlert","deviceAlerts","modelStatuses","deviceStatuses","editable","modelValue"])):Ce("",!0)}const me=De(_e,[["render",Nt]]);_e.__docgenInfo={displayName:"FSDeviceOrganisationTile",exportName:"default",description:"",tags:{},props:[{name:"deviceOrganisationId",type:{name:"string"},required:!0},{name:"modelValue",type:{name:"boolean"},required:!1,defaultValue:{func:!1,value:"false"}},{name:"editable",type:{name:"boolean"},required:!1,defaultValue:{func:!1,value:"true"}}],events:[{name:"update:modelValue"}],sourceFiles:["/home/runner/work/foundation-shared-ui/foundation-shared-ui/src/core/foundation-core-components/components/tiles/FSDeviceOrganisationTile.vue"]};const so={title:"Foundation/Core/Tiles/DeviceOrganisation",component:me,tags:["autodocs"],argTypes:{onClick:{action:"clicked"}}},x={args:{args:{values:["1","2","3"],selected:[!1,!1,!1]}},render:(o,{argTypes:e})=>({components:{FSDeviceOrganisationTile:me},props:Object.keys(e),setup(){return{...o}},template:`
    <div style="display: flex; gap: 10px; flex-wrap: wrap; width: 100vw;">
      <FSDeviceOrganisationTile
        v-for="(deviceOrganisationId, index) in args.values"
        :key="index"
        :deviceOrganisationId="deviceOrganisationId"
        @auxclick="args.values.pop()"
        v-model="args.selected[index]"
      />
    </div>`})};var ie,re,ce;x.parameters={...x.parameters,docs:{...(ie=x.parameters)==null?void 0:ie.docs,source:{originalSource:`{
  args: {
    args: {
      values: ["1", "2", "3"],
      selected: [false, false, false]
    }
  },
  render: (args, {
    argTypes
  }) => ({
    components: {
      FSDeviceOrganisationTile
    },
    props: Object.keys(argTypes),
    setup() {
      return {
        ...args
      };
    },
    template: \`
    <div style="display: flex; gap: 10px; flex-wrap: wrap; width: 100vw;">
      <FSDeviceOrganisationTile
        v-for="(deviceOrganisationId, index) in args.values"
        :key="index"
        :deviceOrganisationId="deviceOrganisationId"
        @auxclick="args.values.pop()"
        v-model="args.selected[index]"
      />
    </div>\`
  })
}`,...(ce=(re=x.parameters)==null?void 0:re.docs)==null?void 0:ce.source}}};const io=["Variations"];export{x as Variations,io as __namedExportsOrder,so as default};
