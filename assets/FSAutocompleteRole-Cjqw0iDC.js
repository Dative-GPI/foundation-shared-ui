import{d as D,c as p,y as F,z as V,A as b,C as r,m as I,H as _,I as w,F as M,N as d,B as U,D as L}from"./vue.esm-bundler-DTB_q9xr.js";import{F as P}from"./FSAutocompleteField-CaoqKedU.js";import{F as h}from"./FSButton-DblcRn12.js";import{F as j}from"./FSChip-C1Wzm8E1.js";import{F as S}from"./FSIcon-CJgnsR4e.js";import{u as z}from"./useRoleOrganisationTypes-Dc65a5Q2.js";import{u as E}from"./useRoleOrganisations-CtFWj6Te.js";import{u as H}from"./useAutocomplete-C_CEUaC2.js";import{C as m}from"./useColors-Du1QHlOW.js";import{u as T}from"./useTranslations-BehwFxDb.js";import{_ as W}from"./_plugin-vue_export-helper-DlAUqK2U.js";var l=(e=>(e[e.None=0]="None",e[e.Organisation=1]="Organisation",e[e.OrganisationType=2]="OrganisationType",e))(l||{});const{$tr:c}=T(),G=e=>{switch(e){case l.None:return c("ui.role-type.none","None");case l.Organisation:return c("ui.role-type.organisation","Custom");case l.OrganisationType:return c("ui.role-type.organisation-type","Shared")}},J=e=>{switch(e){case l.None:return m.Error;case l.Organisation:return m.Primary;case l.OrganisationType:return m.Warning}},C=D({name:"FSAutocompleteRole",components:{FSAutocompleteField:P,FSButton:h,FSChip:j,FSIcon:S},props:{roleOrganisationTypeFilters:{type:Object,required:!1,default:null},roleOrganisationFilters:{type:Object,required:!1,default:null},modelValue:{type:[Array,String],required:!1,default:null},type:{type:[Array,Number],required:!1,default:l.None},ignoreRoleOrganisationTypes:{type:Boolean,required:!1,default:!1},ignoreRoleOrganisations:{type:Boolean,required:!1,default:!1},multiple:{type:Boolean,required:!1,default:!1},toggleSetDisabled:{type:Boolean,required:!1,default:!1}},emits:["update","update:modelValue","update:type"],setup(e,{emit:n}){const{getMany:f,fetching:g,entities:y}=z(),{getMany:O,fetching:i,entities:s}=E(),{$tr:o}=T(),u=p(()=>y.value.map(a=>({id:a.id,icon:a.icon,label:a.label,type:l.OrganisationType})).concat(s.value.map(a=>({id:a.id,icon:a.icon,label:a.label,type:l.Organisation})))),q=p(()=>B.value&&(g.value||i.value)),R=p(()=>e.multiple&&e.modelValue?o("ui.autocomplete-role.placeholder","{0} role(s) selected",e.modelValue.length):null),N=a=>{Array.isArray(a)?(n("update:modelValue",a.map(t=>t.id)),n("update:type",a.map(t=>t.type)),n("update",{modelValue:a.map(t=>t.id),type:a.map(t=>t.type)})):(n("update:modelValue",a==null?void 0:a.id),n("update:type",a==null?void 0:a.type),n("update",{modelValue:a==null?void 0:a.id,type:a==null?void 0:a.type}))},A=a=>{const t=[];return e.ignoreRoleOrganisations||t.push(O({...e.roleOrganisationFilters,search:a??void 0})),e.ignoreRoleOrganisationTypes||t.push(f({...e.roleOrganisationTypeFilters,search:a??void 0})),Promise.all(t)},{toggleSet:$,init:B,onUpdate:k}=H(u,[()=>e.roleOrganisationTypeFilters,()=>e.roleOrganisationFilters],n,A,N);return{placeholder:R,toggleSet:$,RoleType:l,loading:q,roles:u,roleTypeColor:J,roleTypeLabel:G,onUpdate:k}}});function K(e,n,f,g,y,O){const i=F("FSChip"),s=F("FSAutocompleteField");return V(),b(s,I({toggleSet:!e.$props.toggleSetDisabled&&e.toggleSet,multiple:e.$props.multiple,placeholder:e.placeholder,loading:e.loading,items:e.roles,modelValue:e.$props.modelValue,"onUpdate:modelValue":e.onUpdate},e.$attrs),{"item-prepend":r(({item:o})=>[o.icon?(V(),b(S,{key:0},{default:r(()=>[_(w(o.icon),1)]),_:2},1024)):M("",!0)]),"item-append":r(({item:o})=>[d(i,{color:e.roleTypeColor(o.type),label:e.roleTypeLabel(o.type),editable:!1},null,8,["color","label"])]),"toggle-set-item":r(o=>[d(h,{prependIcon:o.item.icon,variant:o.getVariant(o.item),color:o.getColor(o.item),class:L(o.getClass(o.item)),label:o.item.label,onClick:u=>o.toggle(o.item)},U({_:2},[o.item.type?{name:"append",fn:r(()=>[d(i,{color:e.roleTypeColor(o.item.type),label:e.roleTypeLabel(o.item.type),editable:!1},null,8,["color","label"])]),key:"0"}:void 0]),1032,["prependIcon","variant","color","class","label","onClick"])]),_:1},16,["toggleSet","multiple","placeholder","loading","items","modelValue","onUpdate:modelValue"])}const ne=W(C,[["render",K]]);C.__docgenInfo={displayName:"FSAutocompleteRole",exportName:"default",description:"",tags:{},props:[{name:"roleOrganisationTypeFilters",type:{name:"RoleOrganisationTypeFilters"},required:!1,defaultValue:{func:!1,value:"null"}},{name:"roleOrganisationFilters",type:{name:"RoleOrganisationFilters"},required:!1,defaultValue:{func:!1,value:"null"}},{name:"modelValue",type:{name:"string[] | string | null"},required:!1,defaultValue:{func:!1,value:"null"}},{name:"type",type:{name:"RoleType[] | RoleType"},required:!1,defaultValue:{func:!1,value:"RoleType.None"}},{name:"ignoreRoleOrganisationTypes",type:{name:"boolean"},required:!1,defaultValue:{func:!1,value:"false"}},{name:"ignoreRoleOrganisations",type:{name:"boolean"},required:!1,defaultValue:{func:!1,value:"false"}},{name:"multiple",type:{name:"boolean"},required:!1,defaultValue:{func:!1,value:"false"}},{name:"toggleSetDisabled",type:{name:"boolean"},required:!1,defaultValue:{func:!1,value:"false"}}],events:[{name:"update"},{name:"update:modelValue"},{name:"update:type"}],sourceFiles:["/home/runner/work/foundation-shared-ui/foundation-shared-ui/src/core/foundation-core-components/components/autocompletes/FSAutocompleteRole.vue"]};export{ne as F};
