import{a as U,b as E}from"./properties-Qw-O9fbT.js";import{F as T}from"./FSAutocompleteField-BG1Iouz7.js";import{d as L,c,B as V,E as i,m as j,I as b,J as F,k as g,G as P,D as z,H as G,A as H,K as J}from"./vue.esm-bundler-PONd4AmC.js";import{F as $}from"./FSButton-CZKySWW0.js";import{F as K}from"./FSChip-CfNKsjD1.js";import{F as N}from"./FSIcon-bsX1r_Ci.js";import{u as Q}from"./useChartOrganisationTypes-Cu6vTpN7.js";import{u as R}from"./useChartOrganisations-DCRadaiT.js";import{u as W}from"./useAutocomplete-Dt5fcbEj.js";import{a as p,b as X,d as Y}from"./chartsTools-oeUMz6o3.js";import{u as Z}from"./useTranslations-_Q1DYra_.js";import{_ as x}from"./_plugin-vue_export-helper-DlAUqK2U.js";import{V as ee}from"./VAutocomplete-UDTUdT4q.js";import"./FSSearchField-D3E8Wwt2.js";import"./FSTextField-D-U5ryYn.js";import"./FSBaseField-DMW1nZy-.js";import"./FSSpan-DxKJLsSl.js";import"./useBreakpoints-RTs-XAJF.js";import"./useSlots-nyIcwo6G.js";import"./FSCol-Bfhiyt6Y.js";import"./css-BeoQuAfr.js";import"./FSRow-C-b-hpWa.js";import"./useColors-Dytl_X2F.js";import"./_commonjsHelpers-BosuxZz1.js";import"./index-_Z9wfsFC.js";import"./theme-CTzRPxOi.js";import"./useRules-CT5DWk6c.js";import"./VField-So_guaQm.js";import"./index-CANKuvlL.js";import"./color-_AiH45em.js";import"./transition-BXZIGKil.js";import"./VLabel-5AeJpfXJ.js";import"./VInput-ClaXJMCA.js";import"./locale-CoLhg8Wl.js";import"./VIcon-DIMW80nW.js";import"./density-CNNumQ_A.js";import"./dimensions-CNbPgA3L.js";import"./proxiedModel-vOB1Q9Gh.js";import"./loader-DGoLn0VY.js";import"./VProgressCircular-CDK6zSYw.js";import"./resizeObserver-UZYihl4g.js";import"./anchor-D2WyvgD_.js";import"./rounded-BBFi0CuG.js";import"./VDefaultsProvider-BsWh58B_.js";import"./forwardRefs-DWGaNmQL.js";import"./index-Bb4mSIJO.js";import"./FSDialogMenu-Czm1Jubp.js";import"./FSCard-DYD9Tm3w.js";import"./VDialog-CJNHz4BJ.js";import"./VOverlay-U8N3Tt4W.js";import"./display-BXzLC06Y.js";import"./scopeId-CWp-k_S_.js";import"./router-6tzIEQS-.js";import"./FSSlideGroup-CGqp6f7y.js";import"./uuid-DTaye2KM.js";import"./FSButtonNextIcon-Dkus99PH.js";import"./VSlideGroupItem-B5H5Uw6w.js";import"./group-CvGRLeFV.js";import"./FSToggleSet-CRtePpT3.js";import"./FSWrapGroup-CpwsD4SA.js";import"./FSCheckbox-CQphVYdu.js";import"./VCheckboxBtn-B-CDiKqR.js";import"./VSelectionControl-HwS3bHvU.js";import"./index-B8vPsAiL.js";import"./FSFadeOut-CtUd8oOA.js";import"./FSLoader-UOJfN8Qb.js";import"./elevation-CL0Py7Fp.js";import"./FSRadio-BKiTm18z.js";import"./VSelect-BUWJeJyh.js";import"./VList-B9UxDYwK.js";import"./ssrBoot-DufuUSU7.js";import"./border-z35mRDPS.js";import"./VImg-DKyIpwU2.js";import"./VMenu-D11N5TPJ.js";import"./filter-MyCPMQzE.js";import"./FSRouterLink-mxENRZ46.js";import"./vue-router-D84-pxgD.js";import"./FSClickable-CyhgWkHC.js";import"./chartAllowedStep-D7zgduHm.js";import"./chartTimeStep-DIQ4HUqp.js";import"./base-Cd1_IDDR.js";import"./useAppOrganisationId-BgVWu_vS.js";import"./composableFactory-B2U31qfW.js";import"./serviceFactory-aQiBqOvf.js";import"./lodash-Zo30T2Bj.js";import"./applications-pqrfQrBX.js";import"./filter-KTTNQBFM.js";import"./index-Cw6eTGe7.js";import"./theme-CYBW1gqf.js";import"./color-BjNiHHj9.js";import"./icons-B8jsWbid.js";import"./transition-BLc6SjwQ.js";import"./VInput-PVuhiTi8.js";import"./dimensions-Bhowz3j9.js";import"./proxiedModel-YDID3p5t.js";import"./VMenu-CPBRiML2.js";import"./display-iOw8Yit5.js";import"./lazy-6CyKxEg9.js";import"./goto-D1U7XOvA.js";import"./VDivider-C4YNcQz1.js";import"./group-DpPqq0Wg.js";const k=L({name:"FSAutocompleteChart",components:{FSAutocompleteField:T,FSButton:$,FSChip:K,FSIcon:N},props:{chartOrganisationTypeFilters:{type:Object,required:!1,default:null},chartOrganisationFilters:{type:Object,required:!1,default:null},modelValue:{type:[Array,String],required:!1,default:null},type:{type:[Array,Number],required:!1,default:p.None},ignoreChartOrganisationTypes:{type:Boolean,required:!1,default:!1},ignoreChartOrganisations:{type:Boolean,required:!1,default:!1},multiple:{type:Boolean,required:!1,default:!1},toggleSetDisabled:{type:Boolean,required:!1,default:!1},label:{type:String,required:!1,default:null}},emits:["update","update:modelValue","update:type"],setup(e,{emit:o}){const{getMany:f,fetching:h,entities:y}=Q(),{getMany:C,fetching:n,entities:s}=R(),{$tr:a}=Z(),u=c(()=>y.value.map(t=>({id:t.id,icon:t.icon,label:t.label,type:p.OrganisationType})).concat(s.value.map(t=>({id:t.id,icon:t.icon,label:t.label,type:p.Organisation})))),B=c(()=>_.value&&(h.value||n.value)),v=c(()=>e.multiple&&e.modelValue?a("autocomplete.chart.placeholder","{0} chart(s) selected",e.modelValue.length):null),D=t=>{if(Array.isArray(t)){const r=t.map(d=>d.id),O=t.map(d=>d.type);o("update:modelValue",r),o("update:type",O),o("update",{modelValue:r,type:O})}else o("update:modelValue",t==null?void 0:t.id),o("update:type",t==null?void 0:t.type),o("update",{modelValue:t==null?void 0:t.id,type:t==null?void 0:t.type})},I=t=>{const r=[];return e.ignoreChartOrganisationTypes||r.push(f({...e.chartOrganisationTypeFilters,search:t??void 0})),e.ignoreChartOrganisations||r.push(C({...e.chartOrganisationFilters,search:t??void 0})),Promise.all(r)},{toggleSet:M,init:_,onUpdate:w}=W(u,[()=>e.chartOrganisationTypeFilters,()=>e.chartOrganisationFilters],o,I,D);return{placeholder:v,toggleSet:M,loading:B,charts:u,chartOriginColor:Y,chartOriginLabel:X,onUpdate:w}}});function te(e,o,f,h,y,C){const n=b("FSChip"),s=b("FSAutocompleteField");return F(),V(s,j({label:e.$props.label??e.$tr("ui.common.chart","Chart"),toggleSet:!e.$props.toggleSetDisabled&&e.toggleSet,multiple:e.$props.multiple,placeholder:e.placeholder,loading:e.loading,items:e.charts,modelValue:e.$props.modelValue,"onUpdate:modelValue":e.onUpdate},e.$attrs),{"item-prepend":i(({item:a})=>[a.icon?(F(),V(N,{key:0},{default:i(()=>[H(J(a.icon),1)]),_:2},1024)):G("",!0)]),"item-append":i(({item:a})=>[g(n,{color:e.chartOriginColor(a.type),label:e.chartOriginLabel(a.type)},null,8,["color","label"])]),"toggle-set-item":i(a=>[g($,{prependIcon:a.item.icon,variant:a.getVariant(a.item),color:a.getColor(a.item),class:P(a.getClass(a.item)),label:a.item.label,onClick:u=>a.toggle(a.item)},z({_:2},[a.item.type?{name:"append",fn:i(()=>[g(n,{color:e.chartOriginColor(a.item.type),label:e.chartOriginLabel(a.item.type)},null,8,["color","label"])]),key:"0"}:void 0]),1032,["prependIcon","variant","color","class","label","onClick"])]),_:1},16,["label","toggleSet","multiple","placeholder","loading","items","modelValue","onUpdate:modelValue"])}const m=x(k,[["render",te]]);k.__docgenInfo={displayName:"FSAutocompleteChart",exportName:"default",description:"",tags:{},props:[{name:"chartOrganisationTypeFilters",type:{name:"ChartOrganisationTypeFilters"},required:!1,defaultValue:{func:!1,value:"null"}},{name:"chartOrganisationFilters",type:{name:"ChartOrganisationFilters"},required:!1,defaultValue:{func:!1,value:"null"}},{name:"modelValue",type:{name:"string[] | string | null"},required:!1,defaultValue:{func:!1,value:"null"}},{name:"type",type:{name:"ChartOrigin[] | ChartOrigin"},required:!1,defaultValue:{func:!1,value:"ChartOrigin.None"}},{name:"ignoreChartOrganisationTypes",type:{name:"boolean"},required:!1,defaultValue:{func:!1,value:"false"}},{name:"ignoreChartOrganisations",type:{name:"boolean"},required:!1,defaultValue:{func:!1,value:"false"}},{name:"multiple",type:{name:"boolean"},required:!1,defaultValue:{func:!1,value:"false"}},{name:"toggleSetDisabled",type:{name:"boolean"},required:!1,defaultValue:{func:!1,value:"false"}},{name:"label",type:{name:"string | null"},required:!1,defaultValue:{func:!1,value:"null"}}],events:[{name:"update"},{name:"update:modelValue"},{name:"update:type"}],sourceFiles:["/home/runner/work/foundation-shared-ui/foundation-shared-ui/src/core/foundation-core-components/components/autocompletes/FSAutocompleteChart.vue"]};const Wt={title:"Foundation/Core/Autocompletes/AutocompleteChart",component:m,tags:["autodocs"],argTypes:{...E([T,ee],m),...U(m)}},l={render:e=>({components:{FSAutocompleteChart:m},setup(){return{args:e}},template:`
    <FSAutocompleteChart
      v-model="args.modelValue"
      v-model:type="args.type"
      v-bind="args"
    />`}),args:{modelValue:[],type:p.None}};var S,A,q;l.parameters={...l.parameters,docs:{...(S=l.parameters)==null?void 0:S.docs,source:{originalSource:`{
  render: args => ({
    components: {
      FSAutocompleteChart
    },
    setup() {
      return {
        args
      };
    },
    template: \`
    <FSAutocompleteChart
      v-model="args.modelValue"
      v-model:type="args.type"
      v-bind="args"
    />\`
  }),
  args: {
    modelValue: [],
    type: ChartOrigin.None
  }
}`,...(q=(A=l.parameters)==null?void 0:A.docs)==null?void 0:q.source}}};const Xt=["Default"];export{l as Default,Xt as __namedExportsOrder,Wt as default};
