import{f as z,g as V,D as _,E as c,F as p,G as a,A as Y,K as m,L as g,I as f,P as s,R as K,S as W,X}from"./vue.esm-bundler-f632b118.js";import{F as H}from"./FSAutocompleteField-f1eebd00.js";import{F as w}from"./FSCheckbox-bde4293d.js";import{F as N}from"./FSButton-08a91e21.js";import{F as J}from"./FSChip-ff59a050.js";import{_ as S}from"./FSIcon-8032a9d1.js";import{_ as T}from"./FSSpan-4ac1bb71.js";import{_ as b}from"./FSRow-76f4ad1e.js";import{P as A}from"./permissionInfos-da95e15e.js";import{C as $}from"./base-dd7352d9.js";import{S as L}from"./serviceFactory-2dfad3af.js";import{C as k}from"./composableFactory-0b8943d1.js";import{u as Q}from"./useAutocomplete-5bae40b5.js";import{C as h}from"./useColors-5866e399.js";import{u as Z}from"./useTranslations-f6aba3ae.js";import{_ as x}from"./_plugin-vue_export-helper-c27b6911.js";import{V as ee}from"./VSelect-ee781f63.js";var l=(e=>(e[e.None=0]="None",e[e.Organisation=1]="Organisation",e[e.OrganisationType=2]="OrganisationType",e))(l||{});class v{constructor(o){this.id=o.id,this.roleId=o.roleId,this.organisationId=o.organisationId,this.icon=o.icon,this.code=o.code,this.label=o.label,this.scope=o.scope,this.userType=o.userType,this.tags=o.tags.slice(),this.permissions=o.permissions.map(r=>new A(r))}}class oe extends v{constructor(o){super(o),this.description=o.description}}class q{constructor(o){this.id=o.id,this.roleId=o.roleId,this.organisationTypeId=o.organisationTypeId,this.organisationTypeLabel=o.organisationTypeLabel,this.scope=o.scope,this.userType=o.userType,this.icon=o.icon,this.code=o.code,this.label=o.label,this.scope=o.scope,this.userType=o.userType,this.tags=o.tags.slice(),this.permissions=o.permissions.map(r=>new A(r))}}class te extends q{constructor(o){super(o),this.description=o.description}}const U=()=>`${$()}/role-organisations`,ne=e=>`${U()}/${encodeURIComponent(e)}`,E=()=>`${$()}/role-organisation-types`,ae=e=>`${E()}/${encodeURIComponent(e)}`,le=new L("roleOrganisation",oe).createComplete(U,ne,v),ie=k.getMany(le),se=new L("roleOrganisationType",te).create(e=>e.build(e.addGet(ae),e.addGetMany(E,q),e.addNotify())),re=k.getMany(se),{$tr:F}=Z(),ue=e=>{switch(e){case l.None:return F("ui.role-type.none","None");case l.Organisation:return F("ui.role-type.organisation","Custom");case l.OrganisationType:return F("ui.role-type.organisation-type","Shared")}},ce=e=>{switch(e){case l.None:return h.Error;case l.Organisation:return h.Primary;case l.OrganisationType:return h.Warning}},P=z({name:"FSAutocompleteRole",components:{FSAutocompleteField:H,FSCheckbox:w,FSButton:N,FSChip:J,FSIcon:S,FSSpan:T,FSRow:b},props:{roleOrganisationTypeFilters:{type:Object,required:!1,default:null},roleOrganisationFilters:{type:Object,required:!1,default:null},modelValue:{type:[Array,String],required:!1,default:null},type:{type:Number,required:!1,default:l.None},multiple:{type:Boolean,required:!1,default:!1},toggleSetDisabled:{type:Boolean,required:!1,default:!1}},emits:["update:modelValue","update:type"],setup(e,{emit:o}){const{getMany:r,fetching:R,entities:C}=re(),{getMany:I,fetching:u,entities:y}=ie(),t=V(()=>C.value.map(n=>({id:n.id,icon:n.icon,label:n.label,type:l.OrganisationType})).concat(y.value.map(n=>({id:n.id,icon:n.icon,label:n.label,type:l.Organisation})))),i=V(()=>B.value&&(R.value||u.value)),d=n=>{Array.isArray(n)?(o("update:modelValue",n.map(O=>O.id)),o("update:type",n.map(O=>O.type))):(o("update:modelValue",n==null?void 0:n.id),o("update:type",n==null?void 0:n.type))},D=n=>Promise.all([r({...e.roleOrganisationTypeFilters,search:n??void 0}),I({...e.roleOrganisationFilters,search:n??void 0})]),{toggleSet:G,search:M,init:B,onUpdate:j}=Q(t,[()=>e.roleOrganisationTypeFilters,()=>e.roleOrganisationFilters],o,D,d);return{toggleSet:G,RoleType:l,loading:i,search:M,roles:t,roleTypeColor:ce,roleTypeLabel:ue,onUpdate:j}}});function pe(e,o,r,R,C,I){const u=_("FSChip"),y=_("FSAutocompleteField");return c(),p(y,Y({toggleSet:!e.$props.toggleSetDisabled&&e.toggleSet,multiple:e.$props.multiple,loading:e.loading,items:e.roles,modelValue:e.$props.modelValue,"onUpdate:modelValue":e.onUpdate},e.$attrs),{"autocomplete-selection":a(({item:t})=>[e.$props.modelValue?(c(),p(b,{key:0,align:"center-center",wrap:!1},{default:a(()=>[t.raw.icon?(c(),p(S,{key:0},{default:a(()=>[m(g(t.raw.icon),1)]),_:2},1024)):f("",!0),s(T,null,{default:a(()=>[m(g(t.raw.label),1)]),_:2},1024),s(u,{color:e.roleTypeColor(t.raw.type),label:e.roleTypeLabel(t.raw.type),editable:!1},null,8,["color","label"])]),_:2},1024)):f("",!0)]),"autocomplete-item":a(({props:t,item:i})=>[s(ee,K(W({...t,title:""})),{default:a(()=>[s(b,{align:"center-left",wrap:!1},{default:a(()=>{var d;return[e.$props.multiple?(c(),p(w,{key:0,modelValue:(d=e.$props.modelValue)==null?void 0:d.includes(i.value),onClick:t.onClick},null,8,["modelValue","onClick"])):f("",!0),i.raw.icon?(c(),p(S,{key:1},{default:a(()=>[m(g(i.raw.icon),1)]),_:2},1024)):f("",!0),s(T,null,{default:a(()=>[m(g(i.raw.label),1)]),_:2},1024),s(u,{color:e.roleTypeColor(i.raw.type),label:e.roleTypeLabel(i.raw.type),editable:!1},null,8,["color","label"])]}),_:2},1024)]),_:2},1040)]),"toggle-set-item":a(t=>[s(N,{prependIcon:t.item.icon,variant:t.getVariant(t.item),color:t.getColor(t.item),class:X(t.getClass(t.item)),label:t.item.label,onClick:i=>t.toggle(t.item)},{append:a(()=>[s(u,{color:e.roleTypeColor(t.item.type),label:e.roleTypeLabel(t.item.type),editable:!1},null,8,["color","label"])]),_:2},1032,["prependIcon","variant","color","class","label","onClick"])]),_:1},16,["toggleSet","multiple","loading","items","modelValue","onUpdate:modelValue"])}const Ne=x(P,[["render",pe]]);P.__docgenInfo={displayName:"FSAutocompleteRole",exportName:"default",description:"",tags:{},props:[{name:"roleOrganisationTypeFilters",type:{name:"RoleOrganisationTypeFilters"},required:!1,defaultValue:{func:!1,value:"null"}},{name:"roleOrganisationFilters",type:{name:"RoleOrganisationFilters"},required:!1,defaultValue:{func:!1,value:"null"}},{name:"modelValue",type:{name:"string[] | string | null"},required:!1,defaultValue:{func:!1,value:"null"}},{name:"type",type:{name:"RoleType"},required:!1,defaultValue:{func:!1,value:"RoleType.None"}},{name:"multiple",type:{name:"boolean"},required:!1,defaultValue:{func:!1,value:"false"}},{name:"toggleSetDisabled",type:{name:"boolean"},required:!1,defaultValue:{func:!1,value:"false"}}],events:[{name:"update:modelValue"},{name:"update:type"}],sourceFiles:["/home/runner/work/foundation-shared-ui/foundation-shared-ui/src/core/foundation-core-components/components/autocompletes/FSAutocompleteRole.vue"]};export{Ne as F};
