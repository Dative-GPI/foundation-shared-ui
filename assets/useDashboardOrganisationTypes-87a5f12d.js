import{D as l,a as h,W as c}from"./dashboardTranslation-1af96bca.js";import{C as b}from"./base-168b8f74.js";import{S as g}from"./serviceFactory-2dfad3af.js";import{C as a}from"./composableFactory-2d4a69cc.js";class n{constructor(t){this.id=t.id,this.dashboardId=t.dashboardId,this.organisationTypeId=t.organisationTypeId,this.organisationTypeLabel=t.organisationTypeLabel,this.imageId=t.imageId,this.scope=t.scope,this.locked=t.locked,this.label=t.label,this.code=t.code,this.icon=t.icon,this.tags=t.tags.slice(),this.colors=t.colors.slice()}}class r extends n{constructor(t){super(t),this.labelDefault=t.labelDefault,this.translations=t.translations.map(i=>new l(i)),this.singleEntity=t.singleEntity,this.dynamicEntities=t.dynamicEntities,this.globalSelectedEntities=t.globalSelectedEntities,this.globalEntitiesIds=t.globalEntitiesIds.slice(),this.dynamicDates=t.dynamicDates,this.globalStartDate=t.globalStartDate,this.globalEndDate=t.globalEndDate,this.useAutoRefresh=t.useAutoRefresh,this.autoRefresh=t.autoRefresh,this.variables=t.variables.map(i=>new h(i)),this.widgets=t.widgets.map(i=>new c(i))}}const o=()=>`${b()}/dashboard-organisation-types`,s=e=>`${o()}/${encodeURIComponent(e)}`,d=new g("dashboardOrganisationType",r).create(e=>e.build(e.addGet(s),e.addGetMany(o,n),e.addCreate(o),e.addUpdate(s),e.addRemove(s),e.addNotify())),T=a.get(d),R=a.getMany(d);export{T as a,R as u};
