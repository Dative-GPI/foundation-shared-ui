{"version":3,"file":"Organisation.stories-60c6eae3.js","sources":["../../../../src/foundation-shared-ui-services/config/urls/base.ts","../../../../src/foundation-shared-ui-services/config/urls/organisation.ts","../../../../node_modules/@dative-gpi/bones-ui/tools/notifyTools.ts","../../../../node_modules/@dative-gpi/bones-ui/core/filterFactory.ts","../../../../node_modules/@dative-gpi/bones-ui/core/composableFactory.ts","../../../../src/foundation-shared-ui-domain/models/organisations/organisationInfos.ts","../../../../src/foundation-shared-ui-domain/models/organisations/organisationDetails.ts","../../../../src/foundation-shared-ui-services/services/organisationService.ts","../../../../src/foundation-shared-ui-components/components/Organisation.vue"],"sourcesContent":["export const BASE_URL = `/api/core/v1`;","import { BASE_URL } from \"./base\";\nimport { urlFactory } from \"./urlFactory\";\n\nexport const ORGANISATIONS_URL = `${BASE_URL}/organisations`;\nexport const ORGANISATION_URL = (organisationId : string) => `${ORGANISATIONS_URL}/${encodeURIComponent(organisationId)}`; \n","import { Ref } from \"vue\";\nimport { AllCallback, NotifyEvent } from \"../abstractions/inotifyService\";\n\nexport function onCollectionChanged<TInfos, TDetails extends TInfos>(\n    entities: Ref<TInfos[]>,\n    filter: (el: TDetails) => boolean = (el: TDetails) => true,\n    identifier: (e1: TInfos) => any = e1 => (e1 as any).id): AllCallback<TDetails> {\n\n    const result: AllCallback<TDetails> = (ev: NotifyEvent, payload: TDetails | any) => {\n        switch (ev) {\n            case \"add\":\n                add(entities, payload as TDetails, identifier, filter);\n                return;\n            case \"update\":\n                update(entities, payload as TDetails, identifier, filter);\n                return;\n            case \"delete\":\n                remove(entities, payload, identifier);\n                return;\n        }\n    }\n\n    return result;\n}\n\nexport function onEntityChanged<TDetails>(\n    entity: Ref<TDetails | null>,\n    identifier: (e1: TDetails) => any = e1 => (e1 as any).id): AllCallback<TDetails> {\n\n    const result: AllCallback<TDetails> = (ev: NotifyEvent, payload: any) => {\n        if (!entity.value) return;\n        const id = identifier(entity.value);\n\n        if (ev === \"add\" || ev === \"update\") {\n            if (id === identifier(payload)) {\n                entity.value = payload;\n            }\n        }\n\n        if (ev === 'delete' && id === payload) {\n            entity.value = null;\n        }\n    }\n\n    return result;\n}\n\nfunction add<TInfos, TDetails extends TInfos>(\n    entities: Ref<TInfos[]>,\n    payload: TDetails,\n    identifier: (e1: TInfos) => any,\n    filter: (el: TDetails) => boolean\n) {\n    const collection = entities.value;\n    const payloadId = identifier(payload);\n    const index = collection.findIndex(el => identifier(el) === payloadId);\n    const shouldBeAdded = filter(payload);\n\n    if (index == -1 && shouldBeAdded) {\n        collection.push(payload);\n    }\n    else if (index == -1 && !shouldBeAdded) {\n        // nothing to do\n    }\n    else if (index != -1 && !shouldBeAdded) {\n        collection.splice(index, 1);\n    }\n    else { // index != -1 && shouldBeAdded\n        collection.splice(index, 1, payload);\n    }\n}\n\nfunction update<TInfos, TDetails extends TInfos>(\n    entities: Ref<TInfos[]>,\n    payload: TDetails,\n    identifier: (e1: TInfos) => any,\n    filter: (el: TDetails) => boolean\n) {\n    const collection = entities.value;\n    const payloadId = identifier(payload);\n    const index = collection.findIndex(el => identifier(el) === payloadId);\n    const shouldBeUpdated = filter(payload);\n\n    if (index != -1 && shouldBeUpdated) {\n        collection.splice(index, 1, payload);\n    }\n    else if (index != -1 && !shouldBeUpdated) {\n        collection.splice(index, 1);\n    }\n    else if (index == -1 && shouldBeUpdated) {\n        collection.push(payload);\n    }\n    else {\n        // index == -1 && !shouldBeUpdated\n    }\n}\n\nfunction remove<TInfos>(\n    entities: Ref<TInfos[]>,\n    payload: any,\n    identifier: (e1: TInfos) => any\n) {\n    const collection = entities.value;\n    const index = collection.findIndex(el => identifier(el) === payload);\n    if (index != -1) {\n        collection.splice(index, 1);\n    }\n}\n\n","export class FilterFactory {\n    static create<TFilter>(filter: TFilter): (el: any) => boolean {\n        const filterMethod = (el: any) => {\n            for (const key in filter) {\n                if (el[key] !== filter[key]) {\n                    return false;\n                }\n            }\n            return true;\n        }\n\n        return filterMethod;\n    }\n}","import { Ref, onUnmounted, readonly, ref } from \"vue\";\n\nimport { FilterFactory } from \"./filterFactory\";\nimport { INotifyService } from \"../abstractions\";\nimport { onCollectionChanged, onEntityChanged } from \"../tools\";\n\nexport class ComposableFactory {\n    public static get<TDetails>(factory: () => { get(id: string): Promise<TDetails> } & INotifyService<TDetails>) {\n\n        const service = factory();\n\n        return () => {\n            const getting = ref(false);\n            const entity = ref<TDetails | null>(null) as Ref<TDetails | null>;\n\n            const get = async (id: string) => {\n                getting.value = true;\n                try {\n                    entity.value = await service.get(id);\n                }\n                finally {\n                    getting.value = false;\n                }\n\n                const subscriberId = service.subscribe(\"all\", onEntityChanged(entity))\n                onUnmounted(() => service.unsubscribe(subscriberId));\n\n                return readonly(entity);\n            }\n\n            return {\n                getting: readonly(getting),\n                get,\n                entity: readonly(entity)\n            }\n        }\n    }\n\n    public static getMany<TInfos, TFilter>(factory: () => { getMany(filter?: TFilter): Promise<TInfos[]> } & INotifyService<TInfos>) {\n\n        const service = factory();\n\n        return () => {\n            const fetching = ref(false);\n            const entities = ref<TInfos[]>([]) as Ref<TInfos[]>;\n\n            const getMany = async (filter?: TFilter, customFilter?: (el: TInfos) => boolean) => {\n                fetching.value = true;\n                try {\n                    entities.value = await service.getMany(filter);\n                }\n                finally {\n                    fetching.value = false;\n                }\n\n                const filterMethod = customFilter || (filter ? FilterFactory.create(filter) : (el: TInfos) => true);\n\n                const subscriberId = service.subscribe(\"all\", onCollectionChanged(entities, filterMethod))\n                onUnmounted(() => service.unsubscribe(subscriberId));\n\n                return readonly(entities);\n            }\n\n            return {\n                fetching: readonly(fetching),\n                getMany,\n                entities: readonly(entities)\n            }\n        }\n    }\n\n\n    public static create<TCreateDTO, TDetails>(factory: () => { create(payload: TCreateDTO): Promise<TDetails> } & INotifyService<TDetails>) {\n\n        const service = factory();\n\n        return () => {\n            const creating = ref(false);\n            const created = ref<TDetails | null>(null) as Ref<TDetails | null>;\n\n            const create = async (payload: TCreateDTO) => {\n                creating.value = true;\n                try {\n                    created.value = await service.create(payload);\n                }\n                finally {\n                    creating.value = false;\n                }\n\n                const subscriberId = service.subscribe(\"all\", onEntityChanged(created))\n                onUnmounted(() => service.unsubscribe(subscriberId));\n\n                return readonly(created as Ref<TDetails>);\n            }\n\n            return {\n                creating: readonly(creating),\n                create,\n                created: readonly(created)\n            }\n        }\n    }\n\n    public static update<TUpdateDTO, TDetails>(factory: () => { update(id: string, payload: TUpdateDTO): Promise<TDetails> } & INotifyService<TDetails>) {\n        const service = factory();\n\n        return () => {\n            const updating = ref(false);\n            const updated = ref<TDetails | null>(null) as Ref<TDetails | null>;\n\n            const update = async (id: string, payload: TUpdateDTO) => {\n                updating.value = true;\n                try {\n                    updated.value = await service.update(id, payload);\n                }\n                finally {\n                    updating.value = false;\n                }\n\n                const subscriberId = service.subscribe(\"all\", onEntityChanged(updated))\n                onUnmounted(() => service.unsubscribe(subscriberId));\n\n                return readonly(updated.value as Ref<TDetails>);\n            }\n\n            return {\n                updating: readonly(updating),\n                update,\n                updated: readonly(updated)\n            }\n        }\n    }\n\n    public static remove(factory: () => { remove(id: string): Promise<void> }) {\n        const service = factory();\n\n        return () => {\n            const removing = ref(false);\n\n            const remove = async (id: string) => {\n                removing.value = true;\n                try {\n                    await service.remove(id);\n                }\n                finally {\n                    removing.value = false;\n                }\n            }\n\n            return {\n                removing: readonly(removing),\n                remove\n            }\n        }\n    }\n}","export class OrganisationInfos {\n    id: string;\n    label: string;\n    userCount: number;\n    imageId?: string;\n    imageBlurHash?: string;\n    imageHeight?: number;\n    imageWidth?: number;\n\n    constructor(params: OrganisationInfosDTO) {\n        this.id = params.id;\n        this.label = params.label;\n        this.userCount = params.userCount;\n        this.imageId = params.imageId;\n        this.imageBlurHash = params.imageBlurHash;\n        this.imageHeight = params.imageHeight;\n        this.imageWidth = params.imageWidth;\n    }\n}\n\nexport interface OrganisationInfosDTO {\n    id: string;\n    label: string;\n    userCount: number;\n    imageId?: string;\n    imageBlurHash?: string;\n    imageHeight?: number;\n    imageWidth?: number;\n}\n\nexport interface OrganisationFilters {\n    search?: string;\n}","import { OrganisationInfos } from \"./organisationInfos\";\n\nexport class OrganisationDetails extends OrganisationInfos {\n    label: string;\n    userCount: number;\n    organisationTypeId: string;\n    mainDashboardId?: string;\n    description: string;\n    imageId?: string;\n    imageBlurHash?: string;\n    imageHeight?: number;\n    imageWidth?: number;\n    adminId: string;\n    adminName: string;\n    locationCount: number;\n    deviceCount: number;\n    mainDashboardOrganisationsIds: string[];\n    mainDashboardOrganisationTypesIds: string[];\n\n    constructor(params: OrganisationDetailsDTO) {\n        super(params);\n\n        this.organisationTypeId = params.organisationTypeId;\n        this.label = params.label;\n        this.userCount = params.userCount;\n        this.mainDashboardId = params.mainDashboardId;\n        this.description = params.description;\n        this.imageId = params.imageId;\n        this.imageBlurHash = params.imageBlurHash;\n        this.imageHeight = params.imageHeight;\n        this.imageWidth = params.imageWidth;\n        this.adminId = params.adminId;\n        this.adminName = params.adminName;\n        this.locationCount = params.locationCount;\n        this.deviceCount = params.deviceCount;\n        this.mainDashboardOrganisationsIds = params.mainDashboardOrganisationsIds.slice();\n        this.mainDashboardOrganisationTypesIds = params.mainDashboardOrganisationTypesIds.slice();\n    }\n}\n\nexport interface OrganisationDetailsDTO {\n    id: string;\n    organisationTypeId: string;\n    mainDashboardId?: string;\n    label: string;\n    userCount: number;\n    description: string;\n    imageId?: string;\n    imageBlurHash?: string;\n    imageHeight?: number;\n    imageWidth?: number;\n    adminId: string;\n    adminName: string;\n    locationCount: number;\n    deviceCount: number;\n    mainDashboardOrganisationsIds: string[];\n    mainDashboardOrganisationTypesIds: string[];\n}\n\nexport interface CreateOrganisationDTO {\n    label: string,\n    description: string,\n    administratorFirstName: string,\n    administratorLastName: string,\n    administratorEmail: string,\n    administratorPhone: string,\n    administratorTimezoneId: string,\n    organisationTypeId: string,\n    acceptGeneralConditions: boolean,\n    acceptPrivacyPolicy: boolean,\n    legalInformationId: string,\n}\n\nexport interface UpdateOrganisationDTO {\n    label: string;\n    description: string;\n    imageId?: string;\n    image?: string;\n}","import { ServiceFactory, ComposableFactory } from '@dative-gpi/bones-ui';\nimport { ORGANISATIONS_URL, ORGANISATION_URL } from '../config';\nimport { OrganisationDetails, OrganisationInfos } from '@dative-gpi/foundation-shared-ui-domain';\n\nconst organisationServiceFactory = ServiceFactory.createComplete(\"organisation\", \n    ORGANISATIONS_URL, \n    ORGANISATION_URL, \n    OrganisationDetails, \n    OrganisationInfos);\n\nexport const useOrganisation = ComposableFactory.get<OrganisationDetails>(organisationServiceFactory);\nexport const useOrganisations = ComposableFactory.getMany<OrganisationInfos, any>(organisationServiceFactory);","<template>\n    <div>\n        Here is the components containing : {{ organisation?.label }}\n    </div>\n</template>\n  \n<script lang=\"ts\">\nimport { OrganisationDetails } from '@dative-gpi/foundation-shared-ui-domain'\nimport { onMounted, ref, defineComponent } from 'vue';\nimport { useOrganisation } from '@dative-gpi/foundation-shared-ui-services';\nimport { ServiceFactory } from '@dative-gpi/bones-ui';\n\nimport axios from 'axios';\n\nexport default defineComponent({\n    setup() {\n        const { get, entity: organisation } = useOrganisation();\n        onMounted(async () => {\n            get(\"testId\");\n        })\n\n        return {\n            organisation\n        }\n    }\n});\n</script>"],"names":["BASE_URL","ORGANISATIONS_URL","ORGANISATION_URL","organisationId","onCollectionChanged","entities","filter","el","identifier","e1","ev","payload","add","update","remove","onEntityChanged","entity","id","collection","payloadId","index","shouldBeAdded","shouldBeUpdated","FilterFactory","key","ComposableFactory","factory","service","getting","ref","get","subscriberId","onUnmounted","readonly","fetching","getMany","customFilter","filterMethod","creating","created","create","updating","updated","removing","OrganisationInfos","params","OrganisationDetails","organisationServiceFactory","ServiceFactory","useOrganisation","_sfc_main","defineComponent","organisation","onMounted"],"mappings":"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","x_google_ignoreList":[2,3,4]}