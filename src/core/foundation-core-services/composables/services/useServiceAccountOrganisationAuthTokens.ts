import { type CreateServiceAccountOrganisationAuthTokenDTO, ServiceAccountOrganisationAuthTokenDetails, type ServiceAccountOrganisationAuthTokenDetailsDTO, type ServiceAccountOrganisationAuthTokenFilters, ServiceAccountOrganisationAuthTokenInfos, type ServiceAccountOrganisationAuthTokenInfosDTO } from "@dative-gpi/foundation-core-domain/models";
import { ComposableFactory, ServiceFactory } from "@dative-gpi/bones-ui/core";

import { SERVICE_ACCOUNT_ORGANISATION_AUTH_TOKENS_URL, SERVICE_ACCOUNT_ORGANISATION_AUTH_TOKEN_URL } from "../../config/urls";

const ServiceAccountOrganisationAuthTokenServiceFactory = new ServiceFactory<ServiceAccountOrganisationAuthTokenDetailsDTO, ServiceAccountOrganisationAuthTokenDetails>("serviceAccountOrganisationAuthToken", ServiceAccountOrganisationAuthTokenDetails).create(factory => factory.build(
  factory.addGetMany<ServiceAccountOrganisationAuthTokenInfosDTO, ServiceAccountOrganisationAuthTokenInfos, ServiceAccountOrganisationAuthTokenFilters>(SERVICE_ACCOUNT_ORGANISATION_AUTH_TOKENS_URL, ServiceAccountOrganisationAuthTokenInfos),
  factory.addCreate<CreateServiceAccountOrganisationAuthTokenDTO>(SERVICE_ACCOUNT_ORGANISATION_AUTH_TOKENS_URL),
  factory.addRemove(SERVICE_ACCOUNT_ORGANISATION_AUTH_TOKEN_URL),
  factory.addNotify()
));

export const useServiceAccountOrganisationAuthTokens = ComposableFactory.custom(ServiceAccountOrganisationAuthTokenServiceFactory.getMany);
export const useCreateServiceAccountOrganisationAuthToken = ComposableFactory.custom(ServiceAccountOrganisationAuthTokenServiceFactory.create);
export const useRemoveServiceAccountOrganisationAuthToken = ComposableFactory.custom(ServiceAccountOrganisationAuthTokenServiceFactory.remove);